<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring5(二)</title>
      <link href="/post/a648ae81.html"/>
      <url>/post/a648ae81.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><h3 id="1、什么是-AOP"><a href="#1、什么是-AOP" class="headerlink" title="1、什么是 AOP"></a><strong>1、什么是 AOP</strong></h3><p>（1）面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。 </p><p>（2）通俗描述：&#x3D;&#x3D;不通过修改源代码方式，在主干功能里面添加新功能&#x3D;&#x3D; </p><p>（3）使用登录例子说明 AOP</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220728205517222.png" alt="image-20220728205517222"></p><h2 id="二、底层原理"><a href="#二、底层原理" class="headerlink" title="二、底层原理"></a>二、底层原理</h2><h3 id="1、AOP-底层使用动态代理"><a href="#1、AOP-底层使用动态代理" class="headerlink" title="1、AOP 底层使用动态代理"></a>1、AOP 底层使用动态代理</h3><h4 id="（1）有两种情况动态代理"><a href="#（1）有两种情况动态代理" class="headerlink" title="（1）有两种情况动态代理"></a>（1）有两种情况动态代理</h4><p><strong>第一种</strong> <strong>有接口情况，使用 JDK 动态代理</strong> </p><p>⚫ 创建接口实现类代理对象，增强类的方法</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220728205709398.png" alt="image-20220728205709398"></p><p><strong>第二种 没有接口情况，使用 CGLIB 动态代理</strong></p><p>⚫ 创建子类的代理对象，增强类的方法</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220728205805265.png" alt="image-20220728205805265"></p><h2 id="三、JDK-动态代理"><a href="#三、JDK-动态代理" class="headerlink" title="三、JDK 动态代理"></a>三、JDK 动态代理</h2><h3 id="1、使用-JDK-动态代理"><a href="#1、使用-JDK-动态代理" class="headerlink" title="1、使用 JDK 动态代理"></a>1、使用 JDK 动态代理</h3><p>使用 Proxy 类里面的方法创建代理对象</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220728210014148.png" alt="image-20220728210014148"></p><h4 id="（1）调用-newProxyInstance-方法"><a href="#（1）调用-newProxyInstance-方法" class="headerlink" title="（1）调用 newProxyInstance 方法"></a>（1）调用 newProxyInstance 方法</h4><p><strong><code>newProxyInstance(ClassLoader loader, 类&lt;?&gt;[] interfaces, InvocationHandler h)</code> 方法有三个参数：</strong> </p><p>第一参数，类加载器 </p><p>第二参数，增强方法所在的类，这个类实现的接口，支持多个接口 </p><p>第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</p><h3 id="2、编写-JDK-动态代理代码"><a href="#2、编写-JDK-动态代理代码" class="headerlink" title="2、编写 JDK 动态代理代码"></a>2、编写 JDK 动态代理代码</h3><h4 id="（1）创建接口，定义方法"><a href="#（1）创建接口，定义方法" class="headerlink" title="（1）创建接口，定义方法"></a>（1）创建接口，定义方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）创建接口实现类，实现方法"><a href="#（2）创建接口实现类，实现方法" class="headerlink" title="（2）创建接口实现类，实现方法"></a>（2）创建接口实现类，实现方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法执行了、、、&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update方法执行了、、、&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）使用-Proxy-类创建接口代理对象"><a href="#（3）使用-Proxy-类创建接口代理对象" class="headerlink" title="（3）使用 Proxy 类创建接口代理对象"></a>（3）使用 Proxy 类创建接口代理对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces=&#123;UserDao.class&#125;;</span><br><span class="line">        UserDaoImpl userDao=<span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span>  <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="comment">//1、把创建的是谁的代理对象，把谁传递进来</span></span><br><span class="line">    <span class="comment">//有参构造传递</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.obj=obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//增加的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行、、、&quot;</span>+method.getName()+<span class="string">&quot;:传递的参数&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行之后、、、&quot;</span>+obj);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">方法之前执行、、、add:传递的参数[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">add方法执行了、、、</span><br><span class="line">方法执行之后、、、my.spring5.UserDaoImpl@63947c6b</span><br><span class="line">result3</span><br></pre></td></tr></table></figure><h2 id="四、术语"><a href="#四、术语" class="headerlink" title="四、术语"></a>四、术语</h2><h3 id="1、连接点"><a href="#1、连接点" class="headerlink" title="1、连接点"></a>1、连接点</h3><p><strong>类里面的哪些方法可以增强，这些方法就称为连接点</strong></p><h3 id="2、切入点"><a href="#2、切入点" class="headerlink" title="2、切入点"></a>2、切入点</h3><p><strong>实际被真正增强的方法，称为切入点</strong></p><h3 id="3、通知（增强）"><a href="#3、通知（增强）" class="headerlink" title="3、通知（增强）"></a>3、通知（增强）</h3><p><strong>（1）实际增强的逻辑部分称为通知（增强）</strong></p><p><strong>（2）通知有多种类型</strong></p><ul><li><p>前置通知</p></li><li><p>后置通知</p></li><li><p>环绕通知</p></li><li><p>异常通知</p></li><li><p>最终通知(finally)</p></li></ul><h3 id="4、切面"><a href="#4、切面" class="headerlink" title="4、切面"></a>4、切面</h3><p><strong>是动作</strong></p><p>​<strong>通知应用到切入点的过程</strong></p><h2 id="五、AOP操作准备"><a href="#五、AOP操作准备" class="headerlink" title="五、AOP操作准备"></a>五、AOP操作准备</h2><h3 id="1、Spring-框架一般都是基于-AspectJ-实现-AOP-操作"><a href="#1、Spring-框架一般都是基于-AspectJ-实现-AOP-操作" class="headerlink" title="1、Spring 框架一般都是基于 AspectJ 实现 AOP 操作"></a>1、Spring 框架一般都是基于 AspectJ 实现 AOP 操作</h3><p>​（1）AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP 操作 </p><h3 id="2、基于-AspectJ-实现-AOP-操作"><a href="#2、基于-AspectJ-实现-AOP-操作" class="headerlink" title="2、基于 AspectJ 实现 AOP 操作"></a>2、基于 AspectJ 实现 AOP 操作</h3><p>​<strong>（1）基于 xml 配置文件实现</strong> </p><p>​<strong>（2）基于注解方式实现（使用）</strong> </p><h3 id="3、在项目工程里面引入-AOP-相关依赖"><a href="#3、在项目工程里面引入-AOP-相关依赖" class="headerlink" title="3、在项目工程里面引入 AOP 相关依赖"></a>3、在项目工程里面引入 AOP 相关依赖</h3><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220730214305917.png" alt="image-20220730214305917"></p><h3 id="4、切入点表达式"><a href="#4、切入点表达式" class="headerlink" title="4、切入点表达式"></a>4、切入点表达式</h3><h3 id="（1）切入点表达式作用"><a href="#（1）切入点表达式作用" class="headerlink" title="（1）切入点表达式作用"></a>（1）切入点表达式作用</h3><p>知道对哪个类里面的哪个方法进行增强 </p><h3 id="（2）语法结构"><a href="#（2）语法结构" class="headerlink" title="（2）语法结构"></a>（2）语法结构</h3><p> &#x3D;&#x3D;execution([权限修饰符] [返回类型] [类全路径] <a href="%5B%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%5D">方法名称</a> )&#x3D;&#x3D;</p><p><strong>举例 1</strong>：对my.spring5.UserDao 类里面的 add 进行增强 execution(*my.spring5.UserDao.add(..))</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220730214805331.png" alt="image-20220730214805331"></p><p><strong>举例 2</strong>：对my.spring5.UserDao 类里面的所有的方法进行增强 execution(* com.atguigu.dao.BookDao.* (..))</p><p><strong>举例 3</strong>：对 com.atguigu 包里面所有类，类里面所有方法进行增强 execution(* my.spring5.* .*.(..))</p><h3 id="5、AspectJ-注解"><a href="#5、AspectJ-注解" class="headerlink" title="5、AspectJ 注解"></a>5、AspectJ 注解</h3><h4 id="（1）创建类，在类里面定义方法"><a href="#（1）创建类，在类里面定义方法" class="headerlink" title="（1）创建类，在类里面定义方法"></a><strong>（1）创建类，在类里面定义方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;add.......&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（2）创建增强类（编写增强逻辑）"><a href="#（2）创建增强类（编写增强逻辑）" class="headerlink" title="（2）创建增强类（编写增强逻辑）"></a><strong>（2）创建增强类（编写增强逻辑）</strong></h4><p>​（1）在增强类里面，创建方法，让不同方法代表不同通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;<span class="comment">//前置通知</span></span><br><span class="line"> System.out.println(<span class="string">&quot;before......&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）进行通知的配置"><a href="#（3）进行通知的配置" class="headerlink" title="（3）进行通知的配置"></a>（3）进行通知的配置</h4><p>①在 spring 配置文件中，开启注解扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base</span><span class="attr">package</span>=<span class="string">&quot;com.atguigu.spring5.aopanno&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​②使用注解创建 User 和 UserProxy 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>③在增强类上面添加注解 @Aspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>④在 spring 配置文件中开启生成代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启 Aspect 生成代理对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（4）配置不同类型的通知"><a href="#（4）配置不同类型的通知" class="headerlink" title="（4）配置不同类型的通知"></a>（4）配置不同类型的通知</h4><p>①在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"> <span class="comment">//前置通知</span></span><br><span class="line"> <span class="comment">//@Before 注解表示作为前置通知</span></span><br><span class="line"> <span class="meta">@Before(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;before.........&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//后置通知（返回通知）</span></span><br><span class="line"> <span class="meta">@AfterReturning(value = &quot;execution(* </span></span><br><span class="line"><span class="meta">com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;afterReturning.........&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//最终通知</span></span><br><span class="line"> <span class="meta">@After(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;after.........&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//异常通知</span></span><br><span class="line"> <span class="meta">@AfterThrowing(value = &quot;execution(* </span></span><br><span class="line"><span class="meta">com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;afterThrowing.........&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//环绕通知</span></span><br><span class="line"> <span class="meta">@Around(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> </span><br><span class="line">Throwable &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;环绕之前.........&quot;</span>);</span><br><span class="line"> <span class="comment">//被增强的方法执行</span></span><br><span class="line"> proceedingJoinPoint.proceed();</span><br><span class="line"> System.out.println(<span class="string">&quot;环绕之后.........&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6、相同的切入点抽取"><a href="#6、相同的切入点抽取" class="headerlink" title="6、相同的切入点抽取"></a>6、相同的切入点抽取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相同切入点抽取</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointdemo</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前置通知</span></span><br><span class="line"><span class="comment">//@Before 注解表示作为前置通知</span></span><br><span class="line"><span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;before.........&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7、有多个增强类多同一个方法进行增强，设置增强类优先级"><a href="#7、有多个增强类多同一个方法进行增强，设置增强类优先级" class="headerlink" title="7、有多个增强类多同一个方法进行增强，设置增强类优先级"></a>7、有多个增强类多同一个方法进行增强，设置增强类优先级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span>()&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8、完全使用注解开发"><a href="#8、完全使用注解开发" class="headerlink" title="8、完全使用注解开发"></a>8、完全使用注解开发</h3><p>创建配置类，不需要创建 xml 配置文件 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、AOP-操作（AspectJ-配置文件）"><a href="#六、AOP-操作（AspectJ-配置文件）" class="headerlink" title="六、AOP 操作（AspectJ 配置文件）"></a>六、AOP 操作（AspectJ 配置文件）</h2><p>1、创建两个类，增强类和被增强类，创建方法 </p><p>2、在 spring 配置文件中创建两个类对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在 spring 配置文件中配置切入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 aop 增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* </span></span></span><br><span class="line"><span class="string"><span class="tag">com.atguigu.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--增强作用在具体的方法上--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、JdbcTemplate-概念和准备）"><a href="#七、JdbcTemplate-概念和准备）" class="headerlink" title="七、JdbcTemplate(概念和准备）"></a>七、JdbcTemplate(概念和准备）</h2><h4 id="1、什么是-JdbcTemplate"><a href="#1、什么是-JdbcTemplate" class="headerlink" title="1、什么是 JdbcTemplate"></a>1、什么是 JdbcTemplate</h4><p>（1&#x3D;&#x3D;）Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作&#x3D;&#x3D;</p><h4 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h4><p>（1）引入相关 jar 包</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829201358974.png" alt="image-20220829201358974"></p><p>（2）在 spring 配置文件配置数据库连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///user_db&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）配置 JdbcTemplate 对象，注入 DataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JdbcTemplate 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--注入 dataSource--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象</p><p>* 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⚫ Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"> <span class="comment">//注入 dao</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>⚫ Dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"> <span class="comment">//注入 JdbcTemplate</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="八、JdbcTemplate-操作数据库（添加）"><a href="#八、JdbcTemplate-操作数据库（添加）" class="headerlink" title="八、JdbcTemplate 操作数据库（添加）"></a>八、JdbcTemplate 操作数据库（添加）</h2><p>1、对应数据库创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>()&#123;</span><br><span class="line">peivate String useId;</span><br><span class="line">peivate String username;</span><br><span class="line">peivate String ustatus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(String userId)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.userId=userId;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.Username=username;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUstatus</span><span class="params">(String ustatus)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.Ustatus=ustatus;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写 service 和 dao</p><p>（1）在 dao 进行数据库添加操作 </p><p>（2）调用 JdbcTemplate 对象里面 &#x3D;&#x3D;update&#x3D;&#x3D; 方法实现添加操作</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829202041150.png" alt="image-20220829202041150"></p><p> <strong>有两个参数</strong></p><p> ⚫ 第一个参数：sql 语句 ⚫ 第二个参数：可变参数，设置 sql 语句值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"> <span class="comment">//注入 JdbcTemplate</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"> <span class="comment">//添加的方法</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span> &#123;</span><br><span class="line"> <span class="comment">//1 创建 sql 语句</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line"> <span class="comment">//2 调用方法实现</span></span><br><span class="line"> Object[] args = &#123;book.getUserId(), book.getUsername(), book.getUstatus()&#125;;</span><br><span class="line"> <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql,args);</span><br><span class="line"> System.out.println(update);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"> <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookService&quot;</span>, </span><br><span class="line">BookService.class);</span><br><span class="line"> <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line"> book.setUserId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"> book.setUsername(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"> book.setUstatus(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"> bookService.addBook(book);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="九、JdbcTemplate-操作数据库（修改和删除）"><a href="#九、JdbcTemplate-操作数据库（修改和删除）" class="headerlink" title="九、JdbcTemplate 操作数据库（修改和删除）"></a>九、JdbcTemplate 操作数据库（修改和删除）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、修改</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set username=?,ustatus=? where user_id=?&quot;</span>;</span><br><span class="line"> Object[] args = &#123;book.getUsername(), book.getUstatus(),book.getUserId()&#125;;</span><br><span class="line"> <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, args);</span><br><span class="line"> System.out.println(update);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>、删除</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_book where user_id=?&quot;</span>;</span><br><span class="line"> <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, id);</span><br><span class="line"> System.out.println(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、JdbcTemplate-操作数据库（查询返回某个值）"><a href="#十、JdbcTemplate-操作数据库（查询返回某个值）" class="headerlink" title="十、JdbcTemplate 操作数据库（查询返回某个值）"></a>十、JdbcTemplate 操作数据库（查询返回某个值）</h2><p>1、查询表里面有多少条记录，返回是某个值 </p><p>2、使用 JdbcTemplate 实现&#x3D;&#x3D;queryForObject&#x3D;&#x3D;查询返回某个值代码</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829202336325.png" alt="image-20220829202336325"></p><p>⚫ <strong>有两个参数</strong> </p><p> ⚫ 第一个参数：sql 语句 ⚫ 第二个参数：返回类型 Class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询表记录数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">selectCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from t_book&quot;</span>;</span><br><span class="line"> <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line"> <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、JdbcTemplate-操作数据库（查询返回对象）"><a href="#十一、JdbcTemplate-操作数据库（查询返回对象）" class="headerlink" title="十一、JdbcTemplate 操作数据库（查询返回对象）"></a>十一、JdbcTemplate 操作数据库（查询返回对象）</h2><p>1、场景：查询图书详情</p><p> 2、JdbcTemplate 实现查询返回对象</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829202540136.png" alt="image-20220829202540136"></p><p>⚫ <strong>有三个参数</strong></p><p>  ⚫ 第一个参数：sql 语句 ⚫ 第二个参数：RowMapper 是接口，针对返回不同类型数据，使用这个接口里面实现类完成 数据封装 ⚫ 第三个参数：sql 语句值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询返回对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">findBookInfo</span><span class="params">(String id)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book where user_id=?&quot;</span>;</span><br><span class="line"> <span class="comment">//调用方法</span></span><br><span class="line"> <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), id);</span><br><span class="line"> <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询返回集合</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">findAllBook</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book&quot;</span>;</span><br><span class="line"> <span class="comment">//调用方法</span></span><br><span class="line"> List&lt;Book&gt; bookList = jdbcTemplate.query(sql, <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));</span><br><span class="line"> <span class="keyword">return</span> bookList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="十二、JdbcTemplate-操作数据库（批量操作）"><a href="#十二、JdbcTemplate-操作数据库（批量操作）" class="headerlink" title="十二、JdbcTemplate 操作数据库（批量操作）"></a>十二、JdbcTemplate 操作数据库（批量操作）</h2><p>1、批量操作：操作表里面多条记录 </p><p>2、JdbcTemplate 实现批量添加操作</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829202812160.png" alt="image-20220829202812160"></p><p>⚫ <strong>有两个参数</strong></p><p>  ⚫ 第一个参数：sql 语句 ⚫ 第二个参数：List 集合，添加多条记录数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量添加</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchAddBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line"> <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line"> System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//批量添加测试</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;a&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;4&quot;</span>,<span class="string">&quot;c++&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;5&quot;</span>,<span class="string">&quot;MySQL&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用批量添加</span></span><br><span class="line">bookService.batchAdd(batchArgs);</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、JdbcTemplate 实现批量修改操作</span><br><span class="line"><span class="comment">//批量修改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchUpdateBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set username=?,ustatus=? where user_id=?&quot;</span>;</span><br><span class="line"> <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line"> System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//批量修改</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;java0909&quot;</span>,<span class="string">&quot;a3&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;c++1010&quot;</span>,<span class="string">&quot;b4&quot;</span>,<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">Object[] o3 = &#123;<span class="string">&quot;MySQL1111&quot;</span>,<span class="string">&quot;c5&quot;</span>,<span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line">batchArgs.add(o3);</span><br><span class="line"><span class="comment">//调用方法实现批量修改</span></span><br><span class="line">bookService.batchUpdate(batchArgs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、JdbcTemplate 实现批量删除操作</span><br><span class="line"><span class="comment">//批量删除</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchDeleteBook</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_book where user_id=?&quot;</span>;</span><br><span class="line"> <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line"> System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//批量删除</span></span><br><span class="line">List&lt;Object[]&gt; batchArgs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Object[] o1 = &#123;<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">Object[] o2 = &#123;<span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">batchArgs.add(o1);</span><br><span class="line">batchArgs.add(o2);</span><br><span class="line"><span class="comment">//调用方法实现批量删除</span></span><br><span class="line">bookService.batchDelete(batchArgs);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="十三、事务操作（事务概念）"><a href="#十三、事务操作（事务概念）" class="headerlink" title="十三、事务操作（事务概念）"></a>十三、事务操作（事务概念）</h2><h3 id="1、什么事务"><a href="#1、什么事务" class="headerlink" title="1、什么事务"></a>1、什么事务</h3><p>（1）事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操 作都失败 </p><p>（2）典型场景：银行转账 </p><ul><li>lucy 转账 100 元 给 mary </li><li>lucy 少 100，mary 多 100</li></ul><h3 id="2、事务四个特性（ACID）"><a href="#2、事务四个特性（ACID）" class="headerlink" title="2、事务四个特性（ACID）"></a>2、事务四个特性（ACID）</h3><p>（1）原子性 （2）一致性 （3）隔离性 （4）持久性</p><h2 id="十四、事务操作（搭建事务操作环境）"><a href="#十四、事务操作（搭建事务操作环境）" class="headerlink" title="十四、事务操作（搭建事务操作环境）"></a>十四、事务操作（搭建事务操作环境）</h2><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829203159379.png" alt="image-20220829203159379"></p><p><strong>1、创建数据库表，添加记录</strong></p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829203244091.png" alt="image-20220829203244091"></p><p><strong>2、创建 service，搭建 dao，完成对象创建和注入关系</strong> </p><p>（1）service 注入 dao，在 dao 注入 JdbcTemplate，在 JdbcTemplate 注入 DataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="comment">//注入 dao</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3、在 dao 创建两个方法：多钱和少钱的方法，在 service 创建方法（转账的方法）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"> <span class="comment">//lucy 转账 100 给 mary</span></span><br><span class="line"> <span class="comment">//少钱</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money=money-? where username=?&quot;</span>;</span><br><span class="line"> jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//多钱</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money=money+? where username=?&quot;</span>;</span><br><span class="line"> jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;mary&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="comment">//注入 dao</span></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"> <span class="comment">//转账的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//lucy 少 100</span></span><br><span class="line"> userDao.reduceMoney();</span><br><span class="line"> <span class="comment">//mary 多 100</span></span><br><span class="line"> userDao.addMoney();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4、上面代码，如果正常执行没有问题的，但是如果代码执行过程中出现异常，有问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转账的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//lucy 少 100</span></span><br><span class="line"> userDao.reduceMoney();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//模拟异常</span></span><br><span class="line"> <span class="type">int</span> i=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//mary 多 100</span></span><br><span class="line"> userDao.addMoney();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>（1）上面问题如何解决呢？</p><p> &#x3D;&#x3D;* 使用事务进行解决&#x3D;&#x3D;</p><p>（2）事务操作过程</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829203705347.png" alt="image-20220829203705347"></p><h2 id="十五、事务操作（Spring-事务管理介绍）"><a href="#十五、事务操作（Spring-事务管理介绍）" class="headerlink" title="十五、事务操作（Spring 事务管理介绍）"></a>十五、事务操作（Spring 事务管理介绍）</h2><p>1、事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层） </p><p>2、在 Spring 进行事务管理操作 </p><p>​（1）有两种方式：编程式事务管理和声明式事务管理（使用）</p><p> 3、声明式事务管理 </p><p>​（1）基于注解方式（使用） </p><p>​（2）基于 xml 配置文件方式 </p><p>4、在 Spring 进行声明式事务管理，底层使用 AOP 原理 </p><p>5、Spring 事务管理 API</p><p>（1）提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829203854813.png" alt="image-20220829203854813"></p><h2 id="十六、事务操作（注解声明式事务管理）"><a href="#十六、事务操作（注解声明式事务管理）" class="headerlink" title="十六、事务操作（注解声明式事务管理）"></a>十六、事务操作（注解声明式事务管理）</h2><h4 id="1、在-spring-配置文件配置事务管理器"><a href="#1、在-spring-配置文件配置事务管理器" class="headerlink" title="1、在 spring 配置文件配置事务管理器"></a>1、在 spring 配置文件配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、在-spring-配置文件，开启事务注解"><a href="#2、在-spring-配置文件，开启事务注解" class="headerlink" title="2、在 spring 配置文件，开启事务注解"></a>2、在 spring 配置文件，开启事务注解</h4><p>（1）在 spring 配置文件引入名称空间 tx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）开启事务注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction</span><span class="attr">manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、在 service 类上面（或者 service 类里面方法上面）添加事务注解 </p><p>（1）@Transactional，这个注解添加到类上面，也可以添加方法上面 </p><p>（2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务 </p><p>（3）如果把这个注解添加方法上面，为这个方法添加事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br></pre></td></tr></table></figure><h2 id="十七、事务操作（声明式事务管理参数配置）"><a href="#十七、事务操作（声明式事务管理参数配置）" class="headerlink" title="十七、事务操作（声明式事务管理参数配置）"></a>十七、事务操作（声明式事务管理参数配置）</h2><p>1、在 service 类上面添加注解&#x3D;&#x3D;@Transactional&#x3D;&#x3D;，在这个注解里面可以配置事务相关参数</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829204939576.png" alt="image-20220829204939576"></p><p>2、propagation：事务传播行为 </p><p>（1）多事务方法直接进行调用，这个过程中事务 是如何进行管理的</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829205016368.png" alt="image-20220829205016368"></p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829205032432.png" alt="image-20220829205032432"></p><p>3、ioslation：事务隔离级别</p><p>（1）事务有特性成为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题 </p><p>（2）有三个读问题：脏读、不可重复读、虚（幻）读 </p><p><strong>（3）&#x3D;&#x3D;脏读&#x3D;&#x3D;：一个未提交事务读取到另一个未提交事务的数据</strong></p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829205136601.png" alt="image-20220829205136601"></p><p><strong>（4）&#x3D;&#x3D;不可重复读&#x3D;&#x3D;：一个未提交事务读取到另一提交事务修改数据</strong></p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829205228460.png" alt="image-20220829205228460"></p><p>（5）&#x3D;&#x3D;虚读&#x3D;&#x3D;：一个未提交事务读取到另一提交事务添加数据 </p><p>（6）解决：通过设置事务隔离级别，解决读问题</p><p><img src="/../imgs/Spring5(%E4%BA%8C)/image-20220829205307786.png" alt="image-20220829205307786"></p><p>4、timeout：超时时间 </p><p>（1）事务需要在一定时间内进行提交，如果不提交进行回滚 </p><p>（2）默认值是 -1 ，设置时间以秒单位进行计算 </p><p>5、readOnly：是否只读 </p><p>（1）读：查询操作，写：添加修改删除操作 </p><p>（2）readOnly 默认值 false，表示可以查询，可以添加修改删除操作 </p><p>（3）设置 readOnly 值是 true，设置成 true 之后，只能查询 </p><p>6、rollbackFor：回滚 </p><p> （1）设置出现哪些异常进行事务回滚 </p><p>7、noRollbackFor：不回滚 </p><p>（1）设置出现哪些异常不进行事务回滚</p><h2 id="十八、事务操作（XML-声明式事务管理）"><a href="#十八、事务操作（XML-声明式事务管理）" class="headerlink" title="十八、事务操作（XML 声明式事务管理）"></a>十八、事务操作（XML 声明式事务管理）</h2><p>1、在 spring 配置文件中进行配置 </p><p>  第一步 配置事务管理器 </p><p>  第二步 配置通知</p><p>  第三步 配置切入点和切面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2 配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3 配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* </span></span></span><br><span class="line"><span class="string"><span class="tag">com.atguigu.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="十九、事务操作（完全注解声明式事务管理）"><a href="#十九、事务操作（完全注解声明式事务管理）" class="headerlink" title="十九、事务操作（完全注解声明式事务管理）"></a>十九、事务操作（完全注解声明式事务管理）</h2><p>1、创建配置类，使用配置类替代 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span> <span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxConfig</span> &#123;</span><br><span class="line"> <span class="comment">//创建数据库连接池</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"> dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"> dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line"> dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"> dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> dataSource;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建 JdbcTemplate 对象</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line"> <span class="comment">//到 ioc 容器中根据类型找到 dataSource</span></span><br><span class="line"> <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line"> <span class="comment">//注入 dataSource</span></span><br><span class="line"> jdbcTemplate.setDataSource(dataSource);</span><br><span class="line"><span class="keyword">return</span> jdbcTemplate;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建事务管理器</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> DataSourceTransactionManager </span><br><span class="line"><span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line"> <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line"> transactionManager.setDataSource(dataSource);</span><br><span class="line"> <span class="keyword">return</span> transactionManager;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5（一）</title>
      <link href="/post/5ef9f770.html"/>
      <url>/post/5ef9f770.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Spring5-一"><a href="#1、Spring5-一" class="headerlink" title="1、Spring5(一)"></a>1、Spring5(一)</h1><h2 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h2><ul><li>Spring：春天——&gt;给软件行业带来了春天</li><li>2002，首次推出了Spring框架的雏形：interface框架！</li><li>Spring框架即以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日，发布了1.0正式版</li><li>Rod Johnson，Spring Framework创始人，著名作者。很难想象Rod Johnson的学历，真的让好多人大吃一惊，他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</li><li>spring理念：使现有的技术更加容易使用，本身是一个大杂烩。</li><li>SSH：Struct2 + Spring + Hibernate</li><li>SSM: SpringMVC + Spring + Mybatis</li><li>官网：<a href="https://spring.io/projects/spring-framework#overview">https://spring.io/projects/spring-framework#overview</a></li><li>官方下载地址：<a href="https://repo.spring.io/ui/native/release/org/springframework/spring">https://repo.spring.io/ui/native/release/org/springframework/spring</a></li><li>官方文档：<a href="https://docs.spring.io/spring-framework/docs/5.2.0.RELEASE/spring-framework-reference/index.html">https://docs.spring.io/spring-framework/docs/5.2.0.RELEASE/spring-framework-reference/index.html</a></li><li>maven包：</li><li>spring-webmvc</li><li>spring-jdb</li></ul><h2 id="1-2优点"><a href="#1-2优点" class="headerlink" title="1.2优点"></a>1.2优点</h2><ul><li>Spring是一个开源的免费框架</li><li>Spring是一个轻量级的，非入侵式的框架</li><li>控制反转(IOC)，面向切面编程(AOP)</li><li>支持事务的处理，对框架整合的支持</li><li><strong>总结：Spring是一个轻量级的控制反转(IOC)和面向切面编程(AOP)的框架</strong></li></ul><h2 id="1-3组成"><a href="#1-3组成" class="headerlink" title="1.3组成"></a>1.3组成</h2><p><img src="/../imgs/Spring5/image-20220906200102204.png" alt="image-20220906200102204"></p><h2 id="1-4扩展"><a href="#1-4扩展" class="headerlink" title="1.4扩展"></a>1.4扩展</h2><p>在spring的官网有这个介绍，现代化的java开发，说白了就是基于spring的开发</p><p><img src="/../imgs/Spring5/image-20220906200138451.png" alt="image-20220906200138451"></p><ul><li>SpringBoot<br>一个快速开发的脚手架<br>基于SpringBoot可以快速开发单个微服务<br>约定大于配置</li><li>SpringCloud<br>基于SpringBoot实现<br>大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！承上启下的作用！</li></ul><h2 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h2><p>1.UserDao接口<br>         2.UserDaoImpl实现类<br>        3.UserService业务接口<br>        4.UserServiceImpl业务实现类<br>在之前的业务中，用户的需求可能会影响原本的代码，程序员需要根据用户的需求去修改源代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！<br>使用Set接口实现，发生了革命性的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">//*利用set进行动态实现值的注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前，程序时主动创建对象，控制权在程序猿手上<br>现在，使用set注入后，程序不再具有主动性，而是变成了被动接收对象<br>这种思想，从本质上解决了问题，程序猿不用再去管理对象的创建了</p><h1 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2.IOC理论推导"></a>2.IOC理论推导</h1><h2 id="2-1-IOC本质"><a href="#2-1-IOC本质" class="headerlink" title="2.1 IOC本质"></a>2.1 IOC本质</h2><p>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。在没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。<br>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把二者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。<br>控制反转是一种通过描述(XML或注解)并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入(Dependenccy Injection,DI)。</p><h1 id="3-HelloSpring"><a href="#3-HelloSpring" class="headerlink" title="3.HelloSpring"></a>3.HelloSpring</h1><h2 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//获取Spring的上下文对象，解析beans.xml文件，生成管理相应的bean对象</span></span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//getBean：参数为spring配置文件中bean的id</span></span><br><span class="line">      <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">      System.out.println(hello.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个过程就叫控制反转。</li><li>控制：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用spring后，对象是由spring来创建的</li><li>反转：程序本身不创建对象，而变成被动的接收对象</li><li>依赖注入：就是利用set方法来进行注入的。<br>IOC是一种编程思想，由主动编程变成了被动接收<br>可以通过newClassPathXmlApplicationContext去浏览一下底层源码，<br>ok，到了现在，我们彻底不用再去程序中进行改动了，要实现不同的操作，只需要在xml配置文件中进行修改，所谓的IOC，一句话搞定：对象由Spring创建，管理，装配！</li></ul><h1 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h1><h2 id="4-1、使用无参构造创建对象，默认！"><a href="#4-1、使用无参构造创建对象，默认！" class="headerlink" title="4.1、使用无参构造创建对象，默认！"></a>4.1、使用无参构造创建对象，默认！</h2><p>*必须有无参构造方法</p><h2 id="4-2、假设我们要使用有参构造构建对象"><a href="#4-2、假设我们要使用有参构造构建对象" class="headerlink" title="4.2、假设我们要使用有参构造构建对象"></a>4.2、假设我们要使用有参构造构建对象</h2><ul><li>下标赋值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--下标赋值--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.User&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tiantian&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类型赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--类型赋值（不建议使用）--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.User&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tiantian&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参数名赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--参数名赋值--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.User&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tiantian&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当在xml配置文件加载时，容器中管理里的对象就已经初始化了（注册bean时就已经被实例化了），无需等到getBean()，</p><h1 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h1><h2 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--别名，如果添加了别名，也可以通过别名获取到这个对象--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;usernew&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">      User user=(User)context.getBean(<span class="string">&quot;usernew&quot;</span>);</span><br><span class="line">      user.show();</span><br></pre></td></tr></table></figure><h2 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5.2、Bean的配置"></a>5.2、Bean的配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  id：bean的唯一标识符，相当于学过的对象名</span></span><br><span class="line"><span class="comment">  class：bean对象所对应的全限定名：包名+类型</span></span><br><span class="line"><span class="comment">  name：也是别名,name可以取多个别名</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;usertt&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usergg,useryy userty;usergty&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;gtygty&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h2><ul><li>import一般用于团队开发使用，他可以将多个配置文件导入合并为一个。<br>假设现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的applicationContext.xml</li><li>张三</li><li>李四</li><li>王五<br>applicationContext.xml</li></ul><p><img src="/../imgs/Spring5/image-20220906200952327.png" alt="image-20220906200952327"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean1.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean2.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean3.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用时直接使用总的配置。</p><h1 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h1><h2 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h2><p>前面已经提及</p><h2 id="6-2、-Set方式注入"><a href="#6-2、-Set方式注入" class="headerlink" title="6.2、*Set方式注入"></a>6.2、*Set方式注入</h2><ul><li><p>依赖注入：set注入依赖注入：set注入</p></li><li><p>依赖：bean对象的创建依赖于容器</p></li><li><p>注入：bean对象中的所有属性，由容器来注入<br>环境搭建环境搭建</p></li><li><p>复杂类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> address;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>真实测试对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String address;</span><br><span class="line">  <span class="keyword">private</span> String[] books;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">  <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">  <span class="keyword">private</span> String wife;</span><br><span class="line">  <span class="keyword">private</span> Properties info;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第一种，普通值注入，value--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;天天&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      ApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">      Student student= (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">      System.out.println(student.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善注入信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xuzhou&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第一种，普通值注入，value--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;天天&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第二种，Bean注入，ref--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第三种，数组注入,--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第四种，List集合注入--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>读书<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>画画<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第五种，Map集合注入--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;545121212&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;545121212&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第六种，Set集合注入--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>ppt<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>doc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>vvc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第七种，null--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第八种，properties--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>2050214801<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span>张飒<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-3、扩展方式注入"><a href="#6-3、扩展方式注入" class="headerlink" title="6.3、扩展方式注入"></a>6.3、扩展方式注入</h2><p>我们可以使用p命令空间和c命令空间进行注入<br>官方解释：</p><p>使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值，property--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;tiantian&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;19&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--c命名空间注入，通过构造器注入，construct-args--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;23&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;gty&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">      ApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line">      User user= context.getBean(<span class="string">&quot;user&quot;</span>,User.class);</span><br><span class="line">      System.out.println(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意：p命令和c命令不能同时使用，需要导入xml约束，并且c命令需要构造对应的有参方法</p><h2 id="6-4、Bean的作用域"><a href="#6-4、Bean的作用域" class="headerlink" title="6.4、Bean的作用域"></a>6.4、Bean的作用域</h2><p><img src="/../imgs/Spring5/image-20220906201327088.png" alt="image-20220906201327088"></p><p>单例模式(spring默认机制)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;23&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;gty&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原型模式：每次从容器中get时，都会产生一个新的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;23&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;gty&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7、自动装配"><a href="#7、自动装配" class="headerlink" title="7、自动装配"></a>7、自动装配</h1><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性<br>在Spring中有三种装配方式：<br>1.在xml中显式配置<br>2.在java中显式配置<br>3.隐式的自动装配bean(重要)</li></ul><h2 id="7-1、测试"><a href="#7-1、测试" class="headerlink" title="7.1、测试"></a>7.1、测试</h2><p>1、环境搭建：一个人有两个宠物</p><h2 id="7-2、ByName自动装配"><a href="#7-2、ByName自动装配" class="headerlink" title="7.2、ByName自动装配"></a>7.2、ByName自动装配</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--byName:会自动在容器上下文查找，和自己对象set方法后面的值对应的bean id--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;天天&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-3、ByType自动装配"><a href="#7-3、ByType自动装配" class="headerlink" title="7.3、ByType自动装配"></a>7.3、ByType自动装配</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--byType:会自动在容器上下文查找，和自己对象属性类型相同的bean--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;天天&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;cat&quot; ref=&quot;cat&quot;/&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注：如果有两个<bean id="cat" class="com.gty.pojo.Cat"/>则找不到，必须保持全局唯一<br>小结：</li><li>byName，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致。</li><li>byType，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</li></ul><h2 id="7-4-使用注解实现自动装配"><a href="#7-4-使用注解实现自动装配" class="headerlink" title="7.4 使用注解实现自动装配"></a>7.4 使用注解实现自动装配</h2><p>jdk1.5支持的注解，Spring2.5就支持注解了<br>使用注解须知：<br>1.导入约束:context约束<br>2.配置注解的支持:context:annotation-config&#x2F;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">     https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">     https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">     https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Autowired">@Autowired</a>:<br>直接在属性上使用即可！也可以在set方式上使用！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Cat cat;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Dog dog;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.cat = cat;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>使用Autowired我们可以不用编写Set方法，前提是这个自动装配的属性在IOC(Spring)容器中存在，且符合名字byName！</li><li>如果<a href="https://github.com/Autowired">@Autowired</a>自动装配的环境比较复杂，自动装配无法通过一个注解<a href="https://github.com/Autowired">@Autowired</a>完成的时候 ，可以使用<a href="https://github.com/Qualifier">@Qualifier</a>(“xxx”)去配合<a href="https://github.com/Autowired">@Autowired</a>的使用，即既无法通过byName又无法通过byType时，指定一个唯一的bean对象注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gty.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">public class People &#123;</span><br><span class="line">@Autowired</span><br><span class="line">@Qualifier(&quot;cat222&quot;)</span><br><span class="line">private Cat cat;</span><br><span class="line">@Autowired</span><br><span class="line">@Qualifier(&quot;dog222&quot;)</span><br><span class="line">private Dog dog;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Resource">@Resource</a>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="meta">@Resource(name=&quot;cat1111&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> Cat cat;</span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/Autowired">@Autowired</a>和<a href="https://github.com/Resource">@Resource</a>区别：</li><li>都是用来自动装配的，都可以放在属性字段上</li><li><a href="https://github.com/Autowired">@Autowired</a>通过byType实现，必须要求这个对象存在</li><li><a href="https://github.com/Resoutce">@Resoutce</a>默认通过byName方式实现，如果找不到名字，则通过byType实现</li><li>执行顺序不同：<a href="https://github.com/Autowired">@Autowired</a>通过byType实现，<a href="https://github.com/Resoutce">@Resoutce</a>通过byName实现</li></ul><h1 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h1><p>在spring4之后，要使用注解开发，必须要保证aop的包导入了</p><p><img src="/../imgs/Spring5/image-20220906201656277.png" alt="image-20220906201656277"></p><p>使用注解需要导入context约束，增加注解的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">     https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">     https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">     https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.gty.pojo&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../imgs/Spring5/image-20220906201806233.png" alt="image-20220906201806233"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">      ApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">      User user=context.getBean(<span class="string">&quot;user&quot;</span>, User.class);<span class="comment">//在类上加了@Component，就相当于bean里的id</span></span><br><span class="line">      System.out.println(user.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、属性如何注入<br>可以放在属性上或者set方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;tiantian&quot;/&gt;</span></span><br><span class="line">  <span class="meta">@Value(&quot;tiantian&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;tiantian&quot;/&gt;</span></span><br><span class="line">  <span class="meta">@Value(&quot;tiantian&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、衍生的注解<br>                <a href="https://github.com/Component">@Component</a>有几个衍生注解，我们在web开发中会按照mvc三层架构分层<br>                dao [<a href="https://github.com/Repository">@Repository</a>]<br>                pojo [<a href="https://github.com/Component">@Component</a>]<br>                service [<a href="https://github.com/Service">@Service</a>]<br>                controller [<a href="https://github.com/Controller">@Controller</a>]<br>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配bean</p><p>4、自动装配<br>                <a href="https://github.com/Autowired">@Autowired</a>：自动装配通过类型和名字<br>                如果<a href="https://github.com/Autowired">@Autowired</a>不能唯一自动装配上属性，则需要通过<a href="https://github.com/Qualifier">@Qualifier</a>(value&#x3D;”xxx”)<br><a href="https://github.com/Nullable">@Nullable</a>:某个字段标记了这个注解，说明这个字段可以为空<br>                <a href="https://github.com/Resoure">@Resoure</a>:自动装配通过名字、类型</p><p>5、作用域<br>                <a href="https://github.com/Scope">@Scope</a>(“”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;tiantian&quot;/&gt;</span></span><br><span class="line">  <span class="meta">@Value(&quot;tiantian&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、小结<br>xml与注解：<br>xml更加万能，适用于任何场合！维护简单方便<br>注解不是自己类使用不了，维护相对复杂！<br>xml与注解最佳实践：<br>xml用来管理bean<br>注解只负责完成属性的注入<br>我们在使用的过程中，只需要注意一个问题：必须让注解生效，开启注解支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component意思是这个类被Spring托管了，注册到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Value(&quot;tiantian&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">              <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">              <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9、使用Java的方式配置Spring"><a href="#9、使用Java的方式配置Spring" class="headerlink" title="9、使用Java的方式配置Spring"></a>9、使用Java的方式配置Spring</h1><p>可以完全不使用Spring的xml配置，全权交给Java实现！<br>JavaConfig是Spring的一个子项目，在Spring4之后变为核心功能。</p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component意思是这个类被Spring托管了，注册到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Value(&quot;tiantian&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">              <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">              <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Configuration是一个配置类，和之前的beans.xml是一样的</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//这个也会被Spring容器托管，注册到容器中，因为它本来也是一个@Component</span></span><br><span class="line"><span class="meta">@Import(GtyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GtyConfig</span> &#123;</span><br><span class="line">  <span class="comment">//注册一个Bean，就相当于之前写的一个Bean标签</span></span><br><span class="line">  <span class="comment">//这个方法的名字，相当于bean标签中的id属性</span></span><br><span class="line">  <span class="comment">//这个方法的返回值，就相当于bean标签中的class属性</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();<span class="comment">//就是返回要注入到bean的对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//如果完全使用了配置类方式去做，我们就只能通过AnnotationConfig上下文来获取容器，通过配置类的class对象加载</span></span><br><span class="line">      ApplicationContext context=<span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(GtyConfig.class);</span><br><span class="line">      User getUser=context.getBean(<span class="string">&quot;getUser&quot;</span>,User.class);</span><br><span class="line">      System.out.println(getUser.getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种纯java的配置，在SpringBoot中随处可见</p><h1 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h1><ul><li>代理模式就是AOP的底层<br>代理模式的分类：</li><li>静态代理</li><li>动态代理</li></ul><p><img src="/../imgs/Spring5/image-20220906202213760.png" alt="image-20220906202213760"></p><ul><li><h2 id="10-1-静态代理"><a href="#10-1-静态代理" class="headerlink" title="10.1 静态代理"></a>10.1 静态代理</h2></li><li><p>角色分析：<br>抽象角色：一般会使用接口或者抽象类来解决<br>真实角色：被代理的角色<br>代理角色：代理真实角色，代理真实角色后，一般会做一些附属操作<br>客户：访问代理对象的人</p></li><li><p>代码步骤</p><p>1.接口</p></li></ul><p><img src="/../imgs/Spring5/image-20220906202242895.png" alt="image-20220906202242895"></p><p>​     2.真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gty.demo01;</span><br><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;房东要出租房子&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​  3.代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gty.demo01;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Host host;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.host = host;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">      host.rent();</span><br><span class="line">      seeHouse();</span><br><span class="line">      contract();</span><br><span class="line">      fare();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//看房子</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;中介带你看房子&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//签合同</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contract</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;签租赁合同&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//收中介费</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理模式<br>好处：<br>可以使真是角色的操作更加纯粹！不用去关注一些公共的业务。<br>公共也就是交给代理角色！实现了业务的分工！<br>公共业务发生扩展的时候，方便集中管理！<br>缺点：<br>一个真实角色就会产生一个代理角色，代码量翻倍</li></ul><h2 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10.2、动态代理"></a>10.2、动态代理</h2><ul><li>态代理和静态代理角色一样</li><li>动态代理和代理类是动态生成的，不是我们直接写好的！</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<br>基于接口：JDK动态代理<br>基于类：cglib<br>java字节码实现：javassist<br>需要了解两个类：Proxy：代理，InvocationHandler：调用处理程序</li><li>动态代理的好处：<br>可以使真实的角色操作更加纯粹！不用去管制公共的事务。<br>公共交给代理角色！实现了业务的分工！<br>公共业务发生扩展的时候，方便集中管理！<br>一个动态代理类代理的是一个接口，一般就是对应的一类业务。<br>一个动态代理类可以代理多个类，只要实现同一个接口即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Matery主题优化篇（二）</title>
      <link href="/post/b892108e.html"/>
      <url>/post/b892108e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Matery主题优化篇（二）"><a href="#Hexo-Matery主题优化篇（二）" class="headerlink" title="Hexo-Matery主题优化篇（二）"></a>Hexo-Matery主题优化篇（二）</h1><blockquote><p>首先声明一下，一定要分清什么是站点配置文件，什么是主题文件，比如我在F盘新建我的博客文件夹，名称为blog，那么站点配置文件的路径为F:&#x2F;blog&#x2F;_config.yml，而你的主题配置文件路径为F:&#x2F;blog&#x2F;themes&#x2F;matery&#x2F;_config.yml。</p></blockquote><h4 id="1、修改主题的基本信息"><a href="#1、修改主题的基本信息" class="headerlink" title="1、修改主题的基本信息"></a>1、修改主题的基本信息</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#这是根目录下的配置文件信息</span><br><span class="line">title: Boy阁阁  #这是网站标题</span><br><span class="line">subtitle:      #这是网站副标题subtitle</span><br><span class="line"># 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性</span><br><span class="line">description: 专注于Web,分享生活,分享知识  #网站描述</span><br><span class="line">keywords: [HTML, CSS, JavaScript, JQuery, React, Vue.js等]  #网站的关键词</span><br><span class="line">author: boygege  #作者，文章版权所显示的</span><br><span class="line">language: zh-CN  #网站语言，不填写，默认为英文</span><br><span class="line">timezone:   #时区，可以不填写</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、修改主题的logo图和favicon图标"><a href="#2、修改主题的logo图和favicon图标" class="headerlink" title="2、修改主题的logo图和favicon图标"></a>2、修改主题的logo图和favicon图标</h4><p>打开你的主题配置文件，找到如下的配置，将其更改为你的logo和favicon路径即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置网站favicon和网站LOGO</span><br><span class="line">favicon: /favicon.png</span><br><span class="line">logo: /favicon.png</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、去掉右上角的github图标"><a href="#3、去掉右上角的github图标" class="headerlink" title="3、去掉右上角的github图标"></a>3、去掉右上角的<a href="https://so.csdn.net/so/search?q=github&spm=1001.2101.3001.7020">github</a>图标</h4><p>打开你的主题配置文件，找到下面的配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Whether to display fork me on github icon and link, default true, You can change it to your repo address</span><br><span class="line"># 配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址.</span><br><span class="line">githubLink:</span><br><span class="line">  enable: true</span><br><span class="line">  url: https://github.com/blinkfox/hexo-theme-matery</span><br><span class="line">  title: Fork Me</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将<strong>enable</strong>的属性值由<strong>true</strong>改为<strong>false</strong>即可。</p><h4 id="4、去掉主页的Github按钮"><a href="#4、去掉主页的Github按钮" class="headerlink" title="4、去掉主页的Github按钮"></a>4、去掉主页的Github按钮</h4><p>打开主题配置文件，找到下面的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 首页 banner 中的第二个按钮的配置，包括按钮的显示名称、font awesome图标和按钮的超链接.</span><br><span class="line">indexbtn:</span><br><span class="line">  enable: true</span><br><span class="line">  name: Github</span><br><span class="line">  icon: fab fa-github-alt</span><br><span class="line">  url: https://github.com/blinkfox/hexo-theme-matery</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5、修改社交链接"><a href="#5、修改社交链接" class="headerlink" title="5、修改社交链接"></a>5、修改社交链接</h4><p>主页banner图中显示的社交链接与底部的社交链接是同步修改的，打开主题配置文件，将社交链接信息修改为你的信息。修改如下:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">socialLink:</span><br><span class="line">  github:  https:<span class="comment">//github.com/BoyGEIGEI</span></span><br><span class="line">  email: mailto:<span class="number">1283181243</span><span class="meta">@qq</span>.com</span><br><span class="line">  facebook: # https:<span class="comment">//www.facebook.com/xxx</span></span><br><span class="line">  twitter: # https:<span class="comment">//twitter.com/xxx</span></span><br><span class="line">  qq: <span class="number">1283181243</span></span><br><span class="line">  csdn: https:<span class="comment">//blog.csdn.net/weixin_53330986?spm=1018.2226.3001.5343</span></span><br><span class="line">  weibo: # https:<span class="comment">//weibo.com/xxx</span></span><br><span class="line">  zhihu: # https:<span class="comment">//www.zhihu.com/xxx</span></span><br><span class="line">  rss: <span class="literal">true</span> # <span class="literal">true</span>、<span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中的<code>weixin</code>我是用的图片链接，会跳转到一个新的标签页，之后还需要修改<code>ejs</code>文件，文件在主题目录下的<code>layout</code>文件夹下的<code>_partial</code>文件夹，修改<code>social-link.ejs</code>，添加相关的配置，我个人添加的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.socialLink.jianshu) &#123; %&gt;</span><br><span class="line">    &lt;a href=&quot;&lt;%= theme.socialLink.jianshu %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;关注我的简书: &lt;%= theme.socialLink.jianshu %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fab fa-jianshu&quot;&gt;简&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% if (theme.socialLink.csdn) &#123; %&gt;</span><br><span class="line">    &lt;a href=&quot;&lt;%= theme.socialLink.csdn %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;关注我的CSDN: &lt;%= theme.socialLink.csdn %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fab fa-csdn&quot;&gt;C&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% if (theme.socialLink.juejin) &#123; %&gt;</span><br><span class="line">    &lt;a href=&quot;&lt;%= theme.socialLink.juejin %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;关注我的掘金: &lt;%= theme.socialLink.juejin %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fab fa-juejin&quot;&gt;掘&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% if (theme.socialLink.cnblogs) &#123; %&gt;</span><br><span class="line">    &lt;a href=&quot;&lt;%= theme.socialLink.cnblogs %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;关注我的博客园: &lt;%= theme.socialLink.cnblogs %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fab fa-juejin&quot;&gt;博&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% if (theme.socialLink.weixin) &#123; %&gt;</span><br><span class="line">    &lt;a href=&quot;&lt;%= theme.socialLink.weixin %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;微信联系我: &lt;%= theme.socialLink.weixin %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fab fa-weixin&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6、去掉banner图的动态滤镜颜色并修改导航栏颜色"><a href="#6、去掉banner图的动态滤镜颜色并修改导航栏颜色" class="headerlink" title="6、去掉banner图的动态滤镜颜色并修改导航栏颜色"></a>6、去掉banner图的动态滤镜颜色并修改导航栏颜色</h4><h4 id="（1）去掉动态滤镜颜色"><a href="#（1）去掉动态滤镜颜色" class="headerlink" title="（1）去掉动态滤镜颜色"></a>（1）去掉动态滤镜颜色</h4><p>打开<code>themes/matery/source/css/matery.css</code>文件，查找<strong>rainbow</strong>属性，然后将其注释即可。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/</span><br><span class="line">@-webkit-keyframes rainbow &#123;</span><br><span class="line">   /* 动态切换背景颜色. */</span><br><span class="line">&#125;</span><br><span class="line">@keyframes rainbow &#123;</span><br><span class="line">    /* 动态切换背景颜色. */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）、修改导航栏颜色及透明效果"><a href="#（2）、修改导航栏颜色及透明效果" class="headerlink" title="（2）、修改导航栏颜色及透明效果"></a>（2）、修改导航栏颜色及透明效果</h4><p>打开<code>themes/matery/source/css/matery.css</code>文件，大约在250行，有一个<code>.bg-color</code>属性，修改其属性值即可，代码如下：</p><p><img src="/../imgs/Hexo-Matery%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220905195926854.png" alt="image-20220905195926854"></p><h4 id="（3）、取消首页渐变颜色动画"><a href="#（3）、取消首页渐变颜色动画" class="headerlink" title="（3）、取消首页渐变颜色动画"></a>（3）、取消首页渐变颜色动画</h4><p>在<code>themes\Matery\source\css\matery.css</code>，ctrl+F快捷键查找<code>.bg-cover:after</code>，注释掉即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* .bg-cover:after &#123;</span><br><span class="line">    -webkit-animation: rainbow 60s infinite;</span><br><span class="line">    animation: rainbow 60s infinite;</span><br><span class="line">&#125; */</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>banner轮播图：原思路是在主题config配置</p><p><img src="/../imgs/Hexo-Matery%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/image-20220905200052845.png" alt="image-20220905200052845"></p><p>如果要修改图片轮播效果，在以下文件<br><code>themes\Matery\layout\_partial\bg-cover-content.ejs</code>位置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.banner.enable) &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 每天切换 banner 图.  Switch banner image every day.</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;.bg-cover&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-image&#x27;</span>, <span class="string">&#x27;url(&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(&#x27;</span>/medias/banner/<span class="string">&#x27; + new Date().getDay() + &#x27;</span>.<span class="property">jpg</span><span class="string">&#x27;) %&gt;)&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;.bg-cover&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-image&#x27;</span>, <span class="string">&#x27;url(&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(&#x27;</span>/medias/banner/<span class="number">0.</span>jpg<span class="string">&#x27;) %&gt;)&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果要多图轮播：主题配置文件夹下设置图片地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">featureImages:</span><br><span class="line">- /medias/featureimages/0.jpg</span><br><span class="line">- /medias/featureimages/1.jpg</span><br><span class="line">- /medias/featureimages/2.jpg</span><br><span class="line">- /medias/featureimages/3.jpg</span><br><span class="line">- /medias/featureimages/4.jpg</span><br><span class="line">- /medias/featureimages/5.jpg</span><br><span class="line">- /medias/featureimages/6.jpg</span><br></pre></td></tr></table></figure><h2 id="7、增加背景壁纸-amp-优化目录栏"><a href="#7、增加背景壁纸-amp-优化目录栏" class="headerlink" title="7、增加背景壁纸&amp;优化目录栏"></a>7、增加背景壁纸&amp;优化目录栏</h2><p>在<code>themes\Matery\source\css\matery.css</code>，ctrl+F快捷键查找<code>body</code><br>修改样式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">     /* background-color: #eaeaea; */</span><br><span class="line">    background: linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)) 0% 0% / cover,</span><br><span class="line">url(&quot;https://wallhaven.cc/w/9mjoy1&quot;), </span><br><span class="line">url(&quot;https://wallhaven.cc/w/9mjoy1&quot;) 0px 0px;</span><br><span class="line">    background-attachment: fixed;</span><br><span class="line">    margin: 0;</span><br><span class="line">    color: #7F95D1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多壁纸可以参考<a href="https://wallhaven.cc/">https://wallhaven.cc</a></p><p>适配目录<br>我发现目录样式竟然在：<code>themes\Matery\layout\_partial\post-detail-toc.ejs</code>，2333，在这里修改吧，修改内容如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.toc-widget &#123;</span><br><span class="line">    width: 345px;</span><br><span class="line">    padding-left: 20px;</span><br><span class="line">    background-color: rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,<span class="number">0.7</span>);</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    box-shadow: <span class="number">0</span> 10px 35px 2px <span class="title function_">rgba</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.15</span>)</span>, <span class="number">0</span> 5px 15px <span class="title function_">rgba</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.07</span>)</span>, <span class="number">0</span> 2px 5px -5px <span class="title function_">rgba</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.1</span>)</span> !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8、增加点击跳转评论按钮"><a href="#8、增加点击跳转评论按钮" class="headerlink" title="8、增加点击跳转评论按钮"></a>8、增加点击跳转评论按钮</h2><p>新建文件<code>themes\Matery\layout\_partial\back-comment.ejs</code>,粘贴如下代码</p><p>我这里评论是valine，直接填写的valine的id——<code>href=&quot;#vcomments&quot;</code>,如果是其他评论，对应修改即可。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 直达评论 --&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;to_comment&quot;</span> class=<span class="string">&quot;comment-scroll&quot;</span>&gt;</span><br><span class="line">    &lt;a class=<span class="string">&quot;btn-floating btn-large waves-effect waves-light&quot;</span> href=<span class="string">&quot;#vcomments&quot;</span> title=<span class="string">&quot;直达评论&quot;</span>&gt;</span><br><span class="line">        &lt;i class=<span class="string">&quot;fas fa-comments&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>themes\Matery\layout\_partial\valine.ejs</code>文末添加一条，引用第一步的内容；</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">&#x27;_partial/back-comment.ejs&#x27;</span>) %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>则只在valine存在的页面才显示直达评论，防止首页其他地方也出现按钮。其实还可以优化为浮动出现，有一点麻烦，我这里没有设置。</p><h2 id="9、修改滑动条"><a href="#9、修改滑动条" class="headerlink" title="9、修改滑动条"></a>9、修改滑动条</h2><p>在<code>themes\Matery\source\css\matery.css</code>样式添加如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    background-color: #FF2A68;</span><br><span class="line">    background-image: -webkit-linear-gradient(45deg,rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">.4</span>) <span class="number">25</span>%,transparent <span class="number">25</span>%,transparent <span class="number">50</span>%,rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">.4</span>) <span class="number">50</span>%,rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">.4</span>) <span class="number">75</span>%,transparent <span class="number">75</span>%,transparent);</span><br><span class="line">    border-radius: 3em;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    background-color: #ffcacaff;</span><br><span class="line">    border-radius: 3em;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: 8px;</span><br><span class="line">    height: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10、樱花特效"><a href="#10、樱花特效" class="headerlink" title="10、樱花特效"></a>10、樱花特效</h2><p>在 &#x2F;themes&#x2F;matery&#x2F;source&#x2F;js 新建文件 sakura.js，并添加如下代码</p><p><a href="https://github.com/shw2018/hexo-blog-fly/blob/master/themes/matery/source/js/sakura.js">code</a></p><p>然后在 &#x2F;themes&#x2F;matery&#x2F;layout.ejs 中添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.sakura.enable) &#123; %&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //只在桌面版网页启用特效</span><br><span class="line">    var windowWidth = $(window).width();</span><br><span class="line">    if (windowWidth &gt; 768) &#123;</span><br><span class="line">        document.write(&#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/sakura.js&quot;&gt;&lt;/script&gt;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在主题的配置文件中增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 页面樱花飘落动效</span><br><span class="line">sakura:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/victoryxa/article/details/105841309">https://blog.csdn.net/victoryxa/article/details/105841309</a></p><p>​<a href="https://blog.csdn.net/cungudafa/article/details/106278206">https://blog.csdn.net/cungudafa/article/details/106278206</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Matery主题优化篇（一）</title>
      <link href="/post/8884fc56.html"/>
      <url>/post/8884fc56.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Matery主题优化篇（一）"><a href="#Hexo-Matery主题优化篇（一）" class="headerlink" title="Hexo-Matery主题优化篇（一）"></a>Hexo-Matery主题优化篇（一）</h1><blockquote><p>首先声明一下，一定要分清什么是站点配置文件，什么是主题文件，比如我在D盘新建我的博客文件夹，名称为Myblog，那么站点配置文件的路径为D:&#x2F;Myblog&#x2F;_config.yml，而你的主题配置文件路径为D:&#x2F;Myblog&#x2F;themes&#x2F;matery&#x2F;_config.yml。</p></blockquote><h2 id="1、下载主题"><a href="#1、下载主题" class="headerlink" title="1、下载主题"></a>1、下载主题</h2><p>点这里下载hexo-theme-matery，当然你也可以在你的 themes 文件夹下使用 git clone 命令来下载。<br>                    git clone <a href="https://github.com/blinkfox/hexo-theme-matery.git">https://github.com/blinkfox/hexo-theme-matery.git</a></p><p>_config.yml 文件的其它修改建议:</p><p>请修改 _config.yml 的 url 的值为你的网站主 URL（如：<a href="http://xxx.github.io).如果还没有就不用管./">http://xxx.github.io）。如果还没有就不用管。</a><br>建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。<br>如果你是中文用户，则建议修改 language 的值为 zh-CN</p><h2 id="2、新建页面"><a href="#2、新建页面" class="headerlink" title="2、新建页面"></a>2、新建页面</h2><h3 id="2-1-新建分类页"><a href="#2-1-新建分类页" class="headerlink" title="2.1. 新建分类页"></a>2.1. 新建分类页</h3><p>categories 页是用来展示所有分类的&#96;页面，如果在你的博客 source 目录下还没有 categories&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><p>hexo new page “categories”<br>编辑你刚刚新建的页面文件 &#x2F;source&#x2F;categories&#x2F;index.md，至少需要以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2022-08-30 17:25:30</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="2-2-新建标签页"><a href="#2-2-新建标签页" class="headerlink" title="2.2. 新建标签页"></a>2.2. 新建标签页</h3><p>tags 页是用来展示所有标签的页面，如果在你的博客 source 目录下还没有 tags&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><p>hexo new page “tags”<br>编辑你刚刚新建的页面文件 &#x2F;source&#x2F;tags&#x2F;index.md，至少需要以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-08-30 17:25:30</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="2-3-新建关于我页"><a href="#2-3-新建关于我页" class="headerlink" title="2.3. 新建关于我页"></a>2.3. 新建关于我页</h3><p>about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><p>hexo new page “about”<br>编辑你刚刚新建的页面文件 &#x2F;source&#x2F;about&#x2F;index.md，至少需要以下内容：</p><h3 id="2-4-新建留言板页（可选的）"><a href="#2-4-新建留言板页（可选的）" class="headerlink" title="2.4. 新建留言板页（可选的）"></a>2.4. 新建留言板页（可选的）</h3><p>contact 页是用来展示留言板信息的页面，如果在你的博客 source 目录下还没有 contact&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><p>hexo new page “contact”<br>编辑你刚刚新建的页面文件 &#x2F;source&#x2F;contact&#x2F;index.md，至少需要以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: contact</span><br><span class="line">date: 2022-08-30 17:25:30</span><br><span class="line">type: &quot;contact&quot;</span><br><span class="line">layout: &quot;contact&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>注：本留言板功能依赖于第三方评论系统，请激活你的评论系统才有效果。并且在主题的 &gt; _config.yml 文件中，第 19 至 21 行的“菜单”配置，取消关于留言板的注释即可。</p><h3 id="2-5-新建友情链接页（可选的）"><a href="#2-5-新建友情链接页（可选的）" class="headerlink" title="2.5. 新建友情链接页（可选的）"></a>2.5. 新建友情链接页（可选的）</h3><p>friends 页是用来展示友情链接信息的页面，如果在你的博客 source 目录下还没有 friends&#x2F;index.md 文件，那么你就需要新建一个，命令如下：</p><p>hexo new page “friends”<br>编辑你刚刚新建的页面文件 &#x2F;source&#x2F;friends&#x2F;index.md，至少需要以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: friends</span><br><span class="line">date: 2022-08-30 17:25:30</span><br><span class="line">type: &quot;friends&quot;</span><br><span class="line">layout: &quot;friends&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;码酱&quot;,</span><br><span class="line">    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;http://luokangyuan.com/&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;前去学习&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/4027734.jpeg&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;闪烁之狐&quot;,</span><br><span class="line">    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;https://blinkfox.github.io/&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;前去学习&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/avatar.jpg&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;ja_rome&quot;,</span><br><span class="line">    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;https://me.csdn.net/jlh912008548&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;前去学习&quot;</span><br><span class="line">&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-6-新建-404-页"><a href="#2-6-新建-404-页" class="headerlink" title="2.6. 新建 404 页"></a>2.6. 新建 404 页</h3><p>如果在你的博客 source 目录下还没有 404.md 文件，那么你就需要新建一个</p><p><code>hexo new page 404</code><br>编辑你刚刚新建的页面文件 &#x2F;source&#x2F;404&#x2F;index.md，至少需要以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 2022-08-30 17:25:30</span><br><span class="line">type: &quot;404&quot;</span><br><span class="line">layout: &quot;404&quot;</span><br><span class="line">description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-菜单导航配置"><a href="#3-菜单导航配置" class="headerlink" title="3. 菜单导航配置"></a>3. 菜单导航配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Index:</span><br><span class="line">    url: /</span><br><span class="line">    icon: fas fa-home</span><br><span class="line">  Tags:</span><br><span class="line">    url: /tags</span><br><span class="line">    icon: fas fa-tags</span><br><span class="line">  Categories:</span><br><span class="line">    url: /categories</span><br><span class="line">    icon: fas fa-bookmark</span><br><span class="line">  Archives:</span><br><span class="line">    url: /archives</span><br><span class="line">    icon: fas fa-archive</span><br><span class="line">  About:</span><br><span class="line">    url: /about</span><br><span class="line">    icon: fas fa-user-circle</span><br><span class="line">  Friends:</span><br><span class="line">    url: /friends</span><br><span class="line">    icon: fas fa-address-book</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-1-二级菜单配置方法"><a href="#3-1-二级菜单配置方法" class="headerlink" title="3.1. 二级菜单配置方法"></a>3.1. 二级菜单配置方法</h3><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><p>在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children)<br>在children下创建二级菜单的 名称name,路径url和图标icon.<br>注意每个二级菜单模块前要加 -.<br>注意缩进格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Index:</span><br><span class="line">    url: /</span><br><span class="line">    icon: fas fa-home</span><br><span class="line">  Tags:</span><br><span class="line">    url: /tags</span><br><span class="line">    icon: fas fa-tags</span><br><span class="line">  Categories:</span><br><span class="line">    url: /categories</span><br><span class="line">    icon: fas fa-bookmark</span><br><span class="line">  Archives:</span><br><span class="line">    url: /archives</span><br><span class="line">    icon: fas fa-archive</span><br><span class="line">  About:</span><br><span class="line">    url: /about</span><br><span class="line">    icon: fas fa-user-circle-o</span><br><span class="line">  Friends:</span><br><span class="line">    url: /friends</span><br><span class="line">    icon: fas fa-address-book</span><br><span class="line">  Medias:</span><br><span class="line">    icon: fas fa-list</span><br><span class="line">    children:</span><br><span class="line">      - name: Music</span><br><span class="line">        url: /music</span><br><span class="line">        icon: fas fa-music</span><br><span class="line">      - name: Movies</span><br><span class="line">        url: /movies</span><br><span class="line">        icon: fas fa-film</span><br><span class="line">      - name: Books</span><br><span class="line">        url: /books</span><br><span class="line">        icon: fas fa-book</span><br><span class="line">      - name: Galleries</span><br><span class="line">        url: /galleries</span><br><span class="line">        icon: fas fa-image</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-代码高亮"><a href="#4-代码高亮" class="headerlink" title="4. 代码高亮"></a>4. 代码高亮</h2><p>从 Hexo5.0 版本开始自带了 prismjs 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 hexo-prism-plugin 的插件，那么你须要执行 npm uninstall hexo-prism-plugin 来卸载掉它，否则生成的代码中会有 { 和 } 的转义字符。</p><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并将 prismjs.enable 的值设置为 true，主要配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: false</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  enable: true</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主题中默认的 prismjs 主题是 Tomorrow Night，如果你想定制自己的主题，可以前往 prismjs 下载页面 定制下载自己喜欢的主题 css 文件，然后将此 css 主题文件取名为 prism.css，替换掉 hexo-theme-matery 主题文件夹中的 source&#x2F;libs&#x2F;prism&#x2F;prism.css 文件即可。</p><h2 id="5、搜索"><a href="#5、搜索" class="headerlink" title="5、搜索"></a>5、搜索</h2><p>本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下：</p><p><code>npm install hexo-generator-search --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure><h2 id="6、中文链接转拼音（建议安装）"><a href="#6、中文链接转拼音（建议安装）" class="headerlink" title="6、中文链接转拼音（建议安装）"></a>6、中文链接转拼音（建议安装）</h2><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用hexo-permalink-pinyinHexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><p>npm i hexo-permalink-pinyin –save<br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  enable: true</span><br><span class="line">  separator: &#x27;-&#x27; # default: &#x27;-&#x27;</span><br></pre></td></tr></table></figure><p>注：除了此插件外，hexo-abbrlink 插件也可以生成非中文的链接。</p><h2 id="7、文章字数统计插件（建议安装）"><a href="#7、文章字数统计插件（建议安装）" class="headerlink" title="7、文章字数统计插件（建议安装）"></a>7、文章字数统计插件（建议安装）</h2><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。</p><p>安装命令如下：</p><p>npm i –save hexo-wordcount<br>然后只需在本主题下的 _config.yml 文件中，将各个文章字数相关的配置激活即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postInfo:</span><br><span class="line">  date: true</span><br><span class="line">  update: false</span><br><span class="line">  wordCount: false # 设置文章字数统计为 true.</span><br><span class="line">  totalCount: false # 设置站点文章总字数统计为 true.</span><br><span class="line">  min2read: false # 阅读时长.</span><br><span class="line">  readCount: false # 阅读次数.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-修改页脚"><a href="#8-修改页脚" class="headerlink" title="8. 修改页脚"></a>8. 修改页脚</h2><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 &#x2F;layout&#x2F;_partial&#x2F;footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><h2 id="9-修改社交链接"><a href="#9-修改社交链接" class="headerlink" title="9. 修改社交链接"></a>9. 修改社交链接</h2><p>在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 &#x2F;layout&#x2F;_partial&#x2F;social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.socialLink.github) &#123; %&gt;</span><br><span class="line">    &lt;a href=&quot;&lt;%= theme.socialLink.github %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;访问我的GitHub&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-修改打赏的二维码图片"><a href="#10-修改打赏的二维码图片" class="headerlink" title="10. 修改打赏的二维码图片"></a>10. 修改打赏的二维码图片</h2><p>在主题文件的 source&#x2F;medias&#x2F;reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h2 id="11-配置音乐播放器（可选的）"><a href="#11-配置音乐播放器（可选的）" class="headerlink" title="11. 配置音乐播放器（可选的）"></a>11. 配置音乐播放器（可选的）</h2><p>要支持音乐播放，在主题的 _config.yml 配置文件中激活music配置即可：</p><p>是否在首页显示音乐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">music:</span><br><span class="line">  enable: true</span><br><span class="line">  title:         # 非吸底模式有效</span><br><span class="line">    enable: true</span><br><span class="line">    show: 听听音乐</span><br><span class="line">  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu</span><br><span class="line">  type: playlist    # require song, playlist, album, search, artist</span><br><span class="line">  id: 503838841     # require song id / playlist id / album id / search keyword</span><br><span class="line">  fixed: false      # 开启吸底模式</span><br><span class="line">  autoplay: false   # 是否自动播放</span><br><span class="line">  theme: &#x27;#42b983&#x27;</span><br><span class="line">  loop: &#x27;all&#x27;       # 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span><br><span class="line">  order: &#x27;random&#x27;   # 音频循环顺序, 可选值: &#x27;list&#x27;, &#x27;random&#x27;</span><br><span class="line">  preload: &#x27;auto&#x27;   # 预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span><br><span class="line">  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span><br><span class="line">  listFolded: true  # 列表默认折叠</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。</p><p>type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>id获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，playlist的id即为这串数字。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建立hexo博客Matery主题的过程</title>
      <link href="/post/92ce42d8.html"/>
      <url>/post/92ce42d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="2022年个人建立hexo博客Matery主题的过程心得"><a href="#2022年个人建立hexo博客Matery主题的过程心得" class="headerlink" title="2022年个人建立hexo博客Matery主题的过程心得"></a>2022年个人建立<em>hexo</em>博客<em>Matery</em>主题的过程心得</h1><h2 id="视频观看第一部分视频学习"><a href="#视频观看第一部分视频学习" class="headerlink" title="视频观看第一部分视频学习"></a>视频观看第一部分视频学习</h2><p>链接：<a href="https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.337.search-card.all.click</a></p><p>视频中的网址失效了，在本文下面给你最新的博客教程</p><h2 id="第二部分：遇到问题看下面的文档"><a href="#第二部分：遇到问题看下面的文档" class="headerlink" title="第二部分：遇到问题看下面的文档"></a>第二部分：遇到问题看下面的文档</h2><p>以及开发文档：<a href="https://wushishu.xyz/post/be8880ea.html">https://wushishu.xyz/post/be8880ea.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3、文件的上传和下载</title>
      <link href="/post/3b8ba7c7.html"/>
      <url>/post/3b8ba7c7.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h1><p>文件的上传和下载，是非常常见的功能。很多的系统中，或者软件中都经常使用文件的上传和下载。 比如：QQ 头像，就使用了上传。 邮箱中也有附件的上传和下载功能。 OA 系统中审批有附件材料的上传。</p><h2 id="1、文件的上传介绍（-重点）"><a href="#1、文件的上传介绍（-重点）" class="headerlink" title="1、文件的上传介绍（*****重点）"></a>1、文件的上传介绍（*****重点）</h2><p>1、要有一个 form 标签，method&#x3D;post 请求 </p><p>2、form 标签的 encType 属性值必须为 multipart&#x2F;form-data 值</p><p> 3、在 form 标签中使用 input type&#x3D;file 添加上传的文件</p><p>4、编写服务器代码（Servlet 程序）接收，处理上传的数据。</p><p>encType&#x3D;multipart&#x2F;form-data 表示提交的数据，以多段（每一个表单项一个数据段）的形式进行拼 接，然后以二进制流的形式发送给服务器</p><p><img src="/../imgs/text/image-20220904212242077.png" alt="image-20220904212242077"></p><h2 id="2、commons-fileupload-jar-常用-API-介绍说明"><a href="#2、commons-fileupload-jar-常用-API-介绍说明" class="headerlink" title="2、commons-fileupload.jar 常用 API 介绍说明"></a>2、commons-fileupload.jar 常用 API 介绍说明</h2><p>commons-fileupload.jar 需要依赖 commons-io.jar 这个包，所以两个包我们都要引入。</p><p><strong>commons-fileupload.jar 和 commons-io.jar 包中，我们常用的类有哪些？</strong></p><p><strong>ServletFileUpload 类，</strong></p><p><strong>用于解析上传的数据。 FileItem 类，表示每一个表单项。</strong></p><p> <strong>boolean ServletFileUpload.isMultipartContent(HttpServletRequest request);</strong> </p><p><strong>判断当前上传的数据格式是否是多段的格式。</strong></p><p> <strong>public List parseRequest(HttpServletRequest request)</strong> </p><p><strong>解析上传的数据</strong> </p><p><strong>boolean FileItem.isFormField()</strong></p><p> <strong>判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。 true 表示普通类型的表单项 false 表示上传的文件类型</strong> </p><p><strong>String FileItem.getFieldName()</strong> </p><p><strong>获取表单项的 name 属性值</strong></p><p><strong>String FileItem.getString()</strong> </p><p><strong>获取当前表单项的值。</strong> </p><p><strong>String FileItem.getName();</strong> </p><p><strong>获取上传的文件名 v</strong></p><p><strong>oid FileItem.write( file );</strong> </p><p><strong>将上传的文件写到 参数 file</strong> 1.3、fileupload 类库的使用：</p><p>上传文件的表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://192.168.31.74:8080/09_EL_JSTL/uploadServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photo&quot;</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解析上传的数据的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来处理上传的数据    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 先判断上传的数据是否多段数据（只有是多段的数据，才是文件上传的）</span></span><br><span class="line">        <span class="keyword">if</span> (ServletFileUpload.isMultipartContent(req)) &#123;</span><br><span class="line"><span class="comment">//           创建FileItemFactory工厂实现类</span></span><br><span class="line">            <span class="type">FileItemFactory</span> <span class="variable">fileItemFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">            <span class="comment">// 创建用于解析上传数据的工具类ServletFileUpload类</span></span><br><span class="line">            <span class="type">ServletFileUpload</span> <span class="variable">servletFileUpload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(fileItemFactory);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 解析上传的数据，得到每一个表单项FileItem</span></span><br><span class="line">                List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);</span><br><span class="line">                <span class="comment">// 循环判断，每一个表单项，是普通类型，还是上传的文件</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">                        <span class="comment">// 普通表单项</span></span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;表单项的name属性值：&quot;</span> + fileItem.getFieldName());</span><br><span class="line">                        <span class="comment">// 参数UTF-8.解决乱码问题</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;表单项的value属性值：&quot;</span> + fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 上传的文件</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;表单项的name属性值：&quot;</span> + fileItem.getFieldName());</span><br><span class="line">                        System.out.println(<span class="string">&quot;上传的文件名：&quot;</span> + fileItem.getName());</span><br><span class="line"></span><br><span class="line">                        fileItem.write(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\&quot;</span> + fileItem.getName()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、文件下载"><a href="#3、文件下载" class="headerlink" title="3、文件下载"></a>3、文件下载</h2><p><img src="/../imgs/text/image-20220904212258899.png" alt="image-20220904212258899"></p><p><strong>下载的常用 API 说明：</strong> </p><p>response.getOutputStream();</p><p>servletContext.getResourceAsStream(); </p><p>servletContext.getMimeType();</p><p> response.setContentType();</p><p>response.setHeader(“C<strong>ontent-Disposition</strong>“, “<strong>attachment</strong>; <strong>fileName&#x3D;1.jpg</strong>“); </p><p>这个响应头告诉浏览器。这是需要下载的。而 <strong>attachment</strong> 表示附件，也就是下载的一个文件。**fileName&#x3D;**后面， 表示下载的文件名。</p><p>完成上面的两个步骤，下载文件是没问题了。但是如果我们要下载的文件是中文名的话。你会发现，下载无法正确显示出正确的中文名。</p><p> 原因是在响应头中，不能包含有中文字符，只能包含 ASCII</p><p>文件下载示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 1、获取要下载的文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">downloadFileName</span> <span class="operator">=</span> <span class="string">&quot;2.jpg&quot;</span>;</span><br><span class="line"><span class="comment">// 2、读取要下载的文件内容 (通过 ServletContext 对象可以读取)</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line"><span class="comment">// 获取要下载的文件类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> servletContext.getMimeType(<span class="string">&quot;/file/&quot;</span> + downloadFileName);</span><br><span class="line">System.out.println(<span class="string">&quot;下载的文件类型：&quot;</span> + mimeType);</span><br><span class="line"><span class="comment">// 4、在回传前，通过响应头告诉客户端返回的数据类型</span></span><br><span class="line">resp.setContentType(mimeType);</span><br><span class="line"><span class="comment">// 5、还要告诉客户端收到的数据是用于下载使用（还是使用响应头）</span></span><br><span class="line"><span class="comment">// Content-Disposition 响应头，表示收到的数据怎么处理</span></span><br><span class="line"><span class="comment">// attachment 表示附件，表示下载使用</span></span><br><span class="line"><span class="comment">// filename= 表示指定下载的文件名</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + downloadFileName);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* /斜杠被服务器解析表示地址为 http://ip:prot/工程名/ 映射 到代码的 Web 目录</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> servletContext.getResourceAsStream(<span class="string">&quot;/file/&quot;</span> +</span><br><span class="line">downloadFileName);</span><br><span class="line"><span class="comment">// 获取响应的输出流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line"><span class="comment">// 3、把下载的文件内容回传给客户端</span></span><br><span class="line"><span class="comment">// 读取输入流中全部的数据，复制给输出流，输出给客户端</span></span><br><span class="line">IOUtils.copy(resourceAsStream,outputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文名乱码问题解决方案："><a href="#文名乱码问题解决方案：" class="headerlink" title="文名乱码问题解决方案："></a>文名乱码问题解决方案：</h2><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><p><strong>URLEncoder 解决 IE 和谷歌浏览器的 附件中 文名问题。</strong></p><p>​如果客户端浏览器是 IE 浏览器 或者 是谷歌浏览器。我们需要使用 URLEncoder 类先对中文名进行 UTF-8 的编码 操作。 </p><p>​因为 IE 浏览器和谷歌浏览器收到含有编码后的字符串后会以 UTF-8 字符集进行解码显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把中文名进行 UTF-8 编码操作。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;attachment; fileName=&quot;</span> + URLEncoder.encode(<span class="string">&quot;中文.jpg&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 然后把编码后的字符串设置到响应头中</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, str);</span><br></pre></td></tr></table></figure><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p><strong>BASE64 编解码 解决 火狐浏览器的附件中文名问 题</strong></p><p>如果客户端浏览器是火狐浏览器。 那么我们需要对中文名进行 BASE64 的编码操作</p><p>这时候需要把请求头 Content-Disposition: attachment; filename&#x3D;中文名 </p><p>编码成为：Content-Disposition: attachment; filename&#x3D;&#x3D;?charset?B?xxxxx?&#x3D;</p><blockquote><p>&#x3D;?charset?B?xxxxx?&#x3D; 现在我们对这段内容进行一下说明。</p><p>&#x3D;?表示编码内容的开始</p><p>charset 表示字符集</p><p>B 表示 BASE64 编码</p><p>xxxx 表示文件名 BASE64</p><p>?&#x3D;表示编码内容的结束</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;这是需要 Base64 编码的内容&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个 Base64 编码器</span></span><br><span class="line"><span class="type">BASE64Encoder</span> <span class="variable">base64Encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>();</span><br><span class="line"><span class="comment">// 执行 Base64 编码操作</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encodedString</span> <span class="operator">=</span> base64Encoder.encode(content.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">System.out.println( encodedString );</span><br><span class="line"><span class="comment">// 创建 Base64 解码器</span></span><br><span class="line"><span class="type">BASE64Decoder</span> <span class="variable">base64Decoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>();</span><br><span class="line"><span class="comment">// 解码操作</span></span><br><span class="line"><span class="type">byte</span>[] bytes = base64Decoder.decodeBuffer(encodedString);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为火狐使用的是 BASE64 的编解码方式还原响应中的汉字。所以需要使用 BASE64Encoder 类进行编码操作</p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、什么是JSP</title>
      <link href="/post/27b5e8b1.html"/>
      <url>/post/27b5e8b1.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-什么是-jsp"><a href="#1-什么是-jsp" class="headerlink" title="1.什么是 jsp?"></a>1.什么是 jsp?</h2><p>jsp 的全称是 java server pages。Java 的服务器页面。</p><p> jsp 的主要作用是代替 Servlet 程序回传 html 页面的数据。</p><p> 因为 Servlet 程序回传 html 页面数据是一件非常繁锁的事情。开发成本和维护成本都极高</p><p>Servlet 回传 html 页面数据的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PringHtml</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 通过响应的回传流回传 html 页面数据</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">writer.write(<span class="string">&quot;&lt;!DOCTYPE html&gt;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot; &lt;html lang=\&quot;en\&quot;&gt;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot; &lt;head&gt;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot; &lt;meta charset=\&quot;UTF-8\&quot;&gt;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot; &lt;title&gt;Title&lt;/title&gt;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot; &lt;/head&gt;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot; &lt;body&gt;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot; 这是 html 页面数据 \r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot; &lt;/body&gt;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot;&lt;/html&gt;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jsp 回传一个简单 html 页面的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">这是html页面</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jsp 的小结：</p><p>2、jsp 如何访问：</p><p>​ jsp 页面和 html 页面一样，都是存放在 web 目录下。访问也跟访问 html 页面一样。 </p><p>​比如： 在 web 目录下有如下的文件： </p><p>​web 目录</p><p>​ a.html 页面 访问地址是 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;&gt; <a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a> </p><pre><code>                 b.jsp 页面 访问地址是 =======&gt;&gt;&gt;&gt;&gt;&gt; http://ip:port/工程路径/b.jsp</code></pre><h2 id="2-jsp-的本质是什么。"><a href="#2-jsp-的本质是什么。" class="headerlink" title="2.jsp 的本质是什么。"></a>2.jsp 的本质是什么。</h2><p>jsp 页面本质上是一个 Servlet 程序。</p><p>当我们第一次访问 jsp 页面的时候。Tomcat 服务器会帮我们把 jsp 页面翻译成为一个 java 源文件。并且对它进行编译成 为.class 字节码程序。我们打开 java 源文件不难发现其里面的内容是：</p><p><img src="C:\Users\庞继豪\AppData\Roaming\Typora\typora-user-images\image-20220423154401462.png" alt="image-20220423154401462"></p><p>我们跟踪原代码发现，HttpJspBase 类。它直接地继承了 HttpServlet 类。也就是说。jsp 翻译出来的 java 类，它间接了继 承了 HttpServlet 类。也就是说，翻译出来的是一个 Servlet 程序</p><p><img src="/imgs/jsp/image-20220904211239222.png" alt="image-20220904211239222"></p><p><strong>总结：通过翻译的 java 源代码我们就可以得到结果：jsp 就是 Servlet 程序。</strong></p><h2 id="3-jsp-的三种语法"><a href="#3-jsp-的三种语法" class="headerlink" title="3.jsp 的三种语法"></a>3.jsp 的三种语法</h2><h3 id="3-1、jsp-头部的-page-指令"><a href="#3-1、jsp-头部的-page-指令" class="headerlink" title="3.1、jsp 头部的 page 指令"></a>3.1、jsp 头部的 page 指令</h3><p>jsp 的 page 指令可以修改 jsp 页面中一些重要的属性，或者行为。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br></pre></td></tr></table></figure><p>i. <strong>language</strong> 属性 表示 jsp 翻译后是什么语言文件。暂时只支持 java。 </p><p>ii. <strong>contentType</strong> 属性 表示 jsp 返回的数据类型是什么。也是源码中 response.setContentType()参数值 </p><p>iii. <strong>pageEncoding</strong> 属性 表示当前 jsp 页面文件本身的字符集。 </p><p>iv. <strong>import</strong> 属性 跟 java 源代码中一样。用于导包，导类。</p><p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;两个属性是给 out 输出流使用&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; </p><p>v. <strong>autoFlush</strong> 属性 设置当 out 输出流缓冲区满了之后，是否自动刷新冲级区。默认值是 true。 </p><p>vi. <strong>buffer</strong> 属性 设置 out 缓冲区的大小。默认是 8kb</p><p>缓冲区溢出错误：</p><p><img src="/imgs/jsp/image-20220904211334723.png" alt="image-20220904211334723"></p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;两个属性是给 out 输出流使用&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p> vii. <strong>errorPage</strong> 属性 设置当 jsp 页面运行时出错，自动跳转去的错误页面路径。</p><!--errorPage 表示错误后自动跳转去的路径 <br/>这个路径一般都是以斜杠打头，它表示请求地址为 http://ip:port/工程路径   映射到代码的 Web 目录 --><p>viii. <strong>isErrorPage</strong> 属性 设置当前 jsp 页面是否是错误信息页面。默认是 false。如果是 true 可以 获取异常信息。</p><p> ix. <strong>session</strong> 属性 设置访问当前 jsp 页面，是否会创建 HttpSession 对象。默认是 true。 </p><p>x. <strong>extends</strong> 属性 设置 jsp 翻译出来的 java 类默认继承谁</p><h3 id="3-2、jsp-中的常用脚本"><a href="#3-2、jsp-中的常用脚本" class="headerlink" title="3.2、jsp 中的常用脚本"></a>3.2、jsp 中的常用脚本</h3><h4 id="声明脚本-极少使用"><a href="#声明脚本-极少使用" class="headerlink" title="声明脚本(极少使用)"></a>声明脚本(极少使用)</h4><p>声明脚本的格式是： &lt;%! 声明 java 代码 %&gt; </p><p>作用：可以给 jsp 翻译出来的 java 类定义属性和方法甚至是静态代码块。内部类等。</p><p> 练习：</p><p> 1、声明类属性 </p><p>2、声明 static 静态代码块 </p><p>3、声明类方法 </p><p>4、声明内部类</p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;java.util.Map&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.util.HashMap&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;%--1、声明类属性--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private static Map&lt;String,Object&gt; map;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--2、声明 static 静态代码块--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    static &#123;</span><br><span class="line">        map = new HashMap&lt;String,Object&gt;();</span><br><span class="line">        map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class="line">        map.put(&quot;key2&quot;, &quot;value2&quot;);</span><br><span class="line">        map.put(&quot;key3&quot;, &quot;value3&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--3、声明类方法--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    public int abc()&#123;</span><br><span class="line">        return 12;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--4、声明内部类--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    public static class A &#123;</span><br><span class="line">        private Integer id = 12;</span><br><span class="line">        private String abc = &quot;abc&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>声明脚本代码翻译对照：</p><p><img src="/imgs/jsp/image-20220904211352796.png" alt="image-20220904211352796"></p><h4 id="表达式脚本（常用）"><a href="#表达式脚本（常用）" class="headerlink" title="表达式脚本（常用）"></a>表达式脚本（常用）</h4><p>表达式脚本的格式是：&lt;%&#x3D;表达式%&gt; </p><p>表达式脚本的作用是：的 jsp 页面上输出数据。 </p><p>表达式脚本的特点：</p><p> 1、所有的表达式脚本都会被翻译到_jspService() 方法中 _</p><p> 2、表达式脚本都会被翻译成为 out.print()输出到页面上 _</p><p>_3、由于表达式脚本翻译的内容都在_jspService() 方法中,所以_jspService()方法中的对象都可以直接使用。 </p><p>4、表达式脚本中的表达式不能以分号结束。 </p><p>练习： </p><ol><li><p>输出整型 </p></li><li><p>输出浮点型 </p></li><li><p>输出字符串 </p></li><li><p>输出对象</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=12 %&gt; </span><br><span class="line">&lt;%=12.12 %&gt; </span><br><span class="line">&lt;%=&quot;我是字符串&quot; %&gt; </span><br><span class="line">&lt;%=request.getParameter(&quot;username&quot;)%&gt;</span><br></pre></td></tr></table></figure><p><img src="/imgs/jsp/image-20220904211404815.png" alt="image-20220904211404815"></p><h4 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h4><p>代码脚本的格式是：</p><p> &lt;% </p><p>​java 语句 </p><p>%&gt; </p><p>代码脚本的作用是：可以在 jsp 页面中，编写我们自己需要的功能（写的是 java 语句）。</p><p> 代码脚本的特点是：</p><p> 1、代码脚本翻译之后都在_jspService 方法中 _</p><p><em>2、代码脚本由于翻译到_jspService()方法中，所以在_jspService()方法中的现有对象都可以直接使用。</em></p><p> 3、还可以由多个代码脚本块组合完成一个完整的 java 语句。</p><p> 4、代码脚本还可以和表达式脚本一起组合使用，在 jsp 页面上输出数据 </p><p>练习： </p><ol><li><p>代码脚本—-if 语句 </p></li><li><p>代码脚本—-for 循环语句 </p></li><li><ol start="3"><li>翻译后 java 文件中_jspService 方法内的代码都可以写</li></ol><p><strong>示例代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;%--练习：--%&gt;</span><br><span class="line">&lt;%--1.代码脚本----if 语句--%&gt;</span><br><span class="line">&lt;%int i = 13 ;</span><br><span class="line">    if (i == 12) &#123;</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好帅<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">&#125; else &#123;</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你又骗人了！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&lt;%--2.代码脚本----for 循环语句--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    &lt;%</span><br><span class="line">        for (int j = 0; j &lt; 10; j++) &#123;</span><br><span class="line">    %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第 &lt;%=j + 1%&gt;行<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&lt;%--3.翻译后 java 文件中_jspService 方法内的代码都可以写--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">    System.out.println(&quot;用户名的请求参数值是：&quot; + username);</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/jsp/image-20220904211416725.png" alt="image-20220904211416725"></p></li></ol><h3 id="3-3、jsp-中的三种注释"><a href="#3-3、jsp-中的三种注释" class="headerlink" title="3.3、jsp 中的三种注释"></a>3.3、jsp 中的三种注释</h3><h4 id="html-注释"><a href="#html-注释" class="headerlink" title="html 注释"></a>html 注释</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是 html 注释 -&gt;</span></span><br></pre></td></tr></table></figure><p>html 注释会被翻译到 java 源代码中。在_jspService 方法里，以 out.writer 输出到客户</p><h4 id="java-注释"><a href="#java-注释" class="headerlink" title="java 注释"></a>java 注释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">// 单行 java 注释 </span><br><span class="line">/* 多行 java 注释 */ </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>java 注释会被翻译到 java 源代码中。</p><h4 id="jsp-注释"><a href="#jsp-注释" class="headerlink" title="jsp 注释"></a>jsp 注释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- 这是 jsp 注释 --%&gt;</span><br></pre></td></tr></table></figure><p> jsp 注释可以注掉，jsp 页面中所有代码</p><h2 id="4-jsp-九大内置对象"><a href="#4-jsp-九大内置对象" class="headerlink" title="4.jsp 九大内置对象"></a>4.jsp 九大内置对象</h2><p>jsp 中的内置对象，是指 Tomcat 在翻译 jsp 页面成为 Servlet 源代码后，内部提供的九大对象，叫内置对象。</p><p><img src="C:\Users\庞继豪\AppData\Roaming\Typora\typora-user-images\image-20220423142118629.png"></p><h2 id="5-jsp-四大域对象"><a href="#5-jsp-四大域对象" class="headerlink" title="5.jsp 四大域对象"></a>5.jsp 四大域对象</h2><p>四个域对象分别是：</p><p> <strong>pageContext</strong> (PageContextImpl 类) 当前 jsp 页面范围内有效</p><p> <strong>request</strong> (HttpServletRequest 类)、 一次请求内有效 </p><p><strong>session</strong> (HttpSession 类)、 一个会话范围内有效（打开浏览器访问服务器，直到关闭浏览器） </p><p><strong>application</strong> (ServletContext 类) 整个 web 工程范围内都有效（只要 web 工程不停止，数据都在） </p><p>域对象是可以像 Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存取范围。 </p><p>虽然四个域对象都可以存取数据。在使用上它们是有优先顺序的。</p><p> 四个域在使用的时候，优先顺序分别是，他们从小到大的范围的顺序。 </p><p><strong>pageContext &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; request &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; session &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; application</strong></p><p>scope.jsp 页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>scope.jsp 页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">    // 往四个域中都分别保存了数据</span><br><span class="line">    pageContext.setAttribute(&quot;key&quot;, &quot;pageContext&quot;);</span><br><span class="line">    request.setAttribute(&quot;key&quot;, &quot;request&quot;);</span><br><span class="line">    session.setAttribute(&quot;key&quot;, &quot;session&quot;);</span><br><span class="line">    application.setAttribute(&quot;key&quot;, &quot;application&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">    pageContext 域是否有值：&lt;%=pageContext.getAttribute(&quot;key&quot;)%&gt; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    request 域是否有值：&lt;%=request.getAttribute(&quot;key&quot;)%&gt; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    session 域是否有值：&lt;%=session.getAttribute(&quot;key&quot;)%&gt; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    application 域是否有值：&lt;%=application.getAttribute(&quot;key&quot;)%&gt; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">    request.getRequestDispatcher(&quot;/scope2.jsp&quot;).forward(request,response);</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>scope2.jsp 页面:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>scope2.jsp 页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    pageContext 域是否有值：&lt;%=pageContext.getAttribute(&quot;key&quot;)%&gt; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    request 域是否有值：&lt;%=request.getAttribute(&quot;key&quot;)%&gt; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    session 域是否有值：&lt;%=session.getAttribute(&quot;key&quot;)%&gt; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    application 域是否有值：&lt;%=application.getAttribute(&quot;key&quot;)%&gt; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/jsp/image-20220904211438355.png" alt="image-20220904211438355"></p><h2 id="6-jsp-中的-out-输出和-response-getWriter-输出的区-别"><a href="#6-jsp-中的-out-输出和-response-getWriter-输出的区-别" class="headerlink" title="6.jsp 中的 out 输出和 response.getWriter 输出的区 别"></a>6.jsp 中的 out 输出和 response.getWriter 输出的区 别</h2><p><strong>response</strong> 中表示响应，我们经常用于设置返回给客户端的内容（输出）</p><p> <strong>out</strong> 也是给用户做输出使用的</p><p><img src="/imgs/jsp/image-20220904211446708.png" alt="image-20220904211446708"></p><p>由于 jsp 翻译之后，底层源代码都是使用 out 来进行输出，所以一般情况下。我们在 jsp 页面中统一使用 out 来进行输出。避 免打乱页面输出内容的顺序</p><p><strong>out.write()</strong> 输出字符串没有问题</p><p> <strong>out.print()</strong> 输出任意数据都没有问题（都转换成为字符串后调用的 write 输出</p><p><code>结论：在 jsp 页面中，可以统一使用 out.print()来进行输出</code></p><h2 id="7-jsp-的常用标签"><a href="#7-jsp-的常用标签" class="headerlink" title="7.jsp 的常用标签"></a>7.jsp 的常用标签</h2><h3 id="jsp-静态包含（主要使用）"><a href="#jsp-静态包含（主要使用）" class="headerlink" title="jsp 静态包含（主要使用）"></a>jsp 静态包含（主要使用）</h3><p>功能使用：</p><p><img src="/imgs/jsp/image-20220904211455137.png" alt="image-20220904211455137"></p><p>示例说明</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- </span><br><span class="line">    </span><br><span class="line">&lt;%@ include file=&quot;&quot;%&gt; 就是静态包含 </span><br><span class="line">file 属性指定你要包含的 jsp 页面的路径 </span><br><span class="line">地址中第一个斜杠 / 表示为 http://ip:port/工程路径/ 映射到代码的 web 目录 </span><br><span class="line">静态包含的特点： </span><br><span class="line">1、静态包含不会翻译被包含的 jsp 页面。 </span><br><span class="line">2、静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出。</span><br><span class="line">--%&gt; </span><br><span class="line"></span><br><span class="line">   头部信息<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   主体内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&lt;%@ include file=&quot;/include/footer.jsp&quot;%&gt;</span><br></pre></td></tr></table></figure><p><img src="/imgs/jsp/image-20220904211537721.png" alt="image-20220904211537721"></p><h3 id="jsp-动态包含"><a href="#jsp-动态包含" class="headerlink" title="jsp 动态包含"></a>jsp 动态包含</h3><p>示例说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:include</span>&gt;</span> 这是动态包含</span><br><span class="line">page 属性是指定你要包含的 jsp 页面的路径</span><br><span class="line">动态包含也可以像静态包含一样。把被包含的内容执行输出到包含位置</span><br><span class="line"></span><br><span class="line">动态包含的特点：</span><br><span class="line">1、动态包含会把包含的 jsp 页面也翻译成为 java 代码</span><br><span class="line">2、动态包含底层代码使用如下代码去调用被包含的 jsp 页面执行输出。</span><br><span class="line">JspRuntimeLibrary.include(request, response, &quot;/include/footer.jsp&quot;, out, false);</span><br><span class="line">3、动态包含，还可以传递参数</span><br><span class="line">--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">&quot;/include/footer.jsp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bbj&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:include</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态包含的底层原理：</p><p><img src="/imgs/jsp/image-20220904211551273.png" alt="image-20220904211551273"></p><h3 id="jsp-标签-转发"><a href="#jsp-标签-转发" class="headerlink" title="jsp 标签-转发"></a>jsp 标签-转发</h3><p>示例说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:forward</span>&gt;</span> 是请求转发标签，它的功能就是请求转发</span><br><span class="line">page 属性设置请求转发的路径</span><br><span class="line">--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">&quot;/scope2.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:forward</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8、jsp-的练习"><a href="#8、jsp-的练习" class="headerlink" title="8、jsp 的练习"></a>8、jsp 的练习</h2><p>九九乘法口诀表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;%-- 练习一：在 jsp 页面中输出九九乘法口诀表 --%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>九九乘法口诀表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> &gt;</span></span><br><span class="line">    &lt;%-- 外层循环遍历行 --%&gt;</span><br><span class="line">    &lt;% for (int i = 1; i &lt;= 9; i++) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        &lt;%-- 内层循环遍历单元格 --%&gt;</span><br><span class="line">        &lt;% for (int j = 1; j &lt;= i ; j++) &#123; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&lt;%=j + &quot;x&quot; + i + &quot;=&quot; + (i*j)%&gt;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请求转发：</p><p><img src="/imgs/jsp/image-20220904211605221.png" alt="image-20220904211605221"></p><h2 id="9、什么是-Listener-监听器"><a href="#9、什么是-Listener-监听器" class="headerlink" title="9、什么是 Listener 监听器"></a>9、什么是 Listener 监听器</h2><p>**1、Listener 监听器它是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监 听器。 **</p><p>**2、Listener 它是 JavaEE 的规范，就是接口 **</p><p><strong>3、监听器的作用是，监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理。</strong></p><h3 id="9-1、ServletContextListener-监听器"><a href="#9-1、ServletContextListener-监听器" class="headerlink" title="9.1、ServletContextListener 监听器"></a>9.1、ServletContextListener 监听器</h3><p>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁。</p><p> ServletContext 对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁。</p><p> 监听到创建和销毁之后都会分别调用 ServletContextListener 监听器的方法反馈。</p><p>两个方法分别是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletContextListener</span> <span class="keyword">extends</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在 ServletContext 对象创建之后马上调用，做初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在 ServletContext 对象销毁之后调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何使用 ServletContextListener 监听器监听 ServletContext 对象。</p><p> 使用步骤如下：</p><p> 1、编写一个类去实现 ServletContextListener </p><p>2、实现其两个回调方法 </p><p>3、到 web.xml 中去配置监听器</p><p>监听器实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServletContextListenerImpl</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ServletContext 对象被创建了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ServletContext 对象被销毁了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml 中的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置监听器--&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">&lt;listener-class&gt;com.atguigu.listener.MyServletContextListenerImpl&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2、EL表达式&amp;JSTL标签库</title>
      <link href="/post/7b04a925.html"/>
      <url>/post/7b04a925.html</url>
      
        <content type="html"><![CDATA[<h1 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h1><h2 id="1-EL-表达式"><a href="#1-EL-表达式" class="headerlink" title="1.EL 表达式"></a>1.EL 表达式</h2><h3 id="1-1、什么是-EL-表达式，EL-表达式的作用"><a href="#1-1、什么是-EL-表达式，EL-表达式的作用" class="headerlink" title="1.1、什么是 EL 表达式，EL 表达式的作用?"></a>1.1、什么是 EL 表达式，EL 表达式的作用?</h3><blockquote><p>**EL 表达式的全称是：Expression Language。是表达式语言。 **</p><p><strong>EL 表达式的什么作用：EL 表达式主要是代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出。</strong></p><p><strong>因为 EL 表达式在输出数据的时候，要比 jsp 的表达式脚本要简洁很多。</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(&quot;key&quot;,&quot;值&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">表达式脚本输出 key 的值是：</span><br><span class="line">&lt;%=request.getAttribute(&quot;key1&quot;)==null?&quot;&quot;:request.getAttribute(&quot;key1&quot;)%&gt;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">EL 表达式输出 key 的值是：$&#123;key1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>EL 表达式的格式是：**${表达式}** </p><p>EL 表达式在输出 null 值的时候，输出的是空串。jsp 表达式脚本输出 null 值的时候，输出的是 null 字符串。</p></blockquote><h3 id="1-2、EL-表达式搜索域数据的顺序"><a href="#1-2、EL-表达式搜索域数据的顺序" class="headerlink" title="1.2、EL 表达式搜索域数据的顺序"></a>1.2、EL 表达式搜索域数据的顺序</h3><p>EL 表达式主要是在 jsp 页面中输出数据。</p><p> 主要是输出域对象中的数据。</p><p>当四个域中都有相同的 key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">    //往四个域中都保存了相同的 key 的数据。</span><br><span class="line">    request.setAttribute(&quot;key&quot;, &quot;request&quot;);</span><br><span class="line">    session.setAttribute(&quot;key&quot;, &quot;session&quot;);</span><br><span class="line">    application.setAttribute(&quot;key&quot;, &quot;application&quot;);</span><br><span class="line">    pageContext.setAttribute(&quot;key&quot;, &quot;pageContext&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123; key &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3、EL-表达式输出-Bean-的普通属性，数组属性"><a href="#1-3、EL-表达式输出-Bean-的普通属性，数组属性" class="headerlink" title="1.3、EL 表达式输出 Bean 的普通属性，数组属性"></a>1.3、EL 表达式输出 Bean 的普通属性，数组属性</h3><p>需求——输出 Person 类中普通属性，数组属性。list 集合属性和 map 集合属性。</p><p>Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span>  String[] phones;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; cities;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br></pre></td></tr></table></figure><p>输出的代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Person person=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setAge(<span class="number">18</span>);</span><br><span class="line">        person.setPhones(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;12345678&quot;</span>,<span class="string">&quot;987654321&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; cities=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        cities.add(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        cities.add(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        cities.add(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        person.setCities(cities);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;value3&quot;</span>);</span><br><span class="line">        person.setMap(map);</span><br><span class="line"></span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;p&quot;</span>,person);</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">输出Person:$&#123;p&#125;&lt;br/&gt;</span><br><span class="line">输出Person的age:$&#123;p.age&#125;&lt;br&gt;</span><br><span class="line">输出Person的phones数组的属性值:$&#123;p.phones[<span class="number">0</span>]&#125;&lt;br&gt;</span><br><span class="line">输出Person的list数组中的某个的属性值:$&#123;p.cities[<span class="number">2</span>]&#125;&lt;br&gt;</span><br><span class="line">    输出Person的map数组的属性值:$&#123;p.map&#125;&lt;br&gt;</span><br><span class="line">    输出Person的map数组的某个key属性值:$&#123;p.map.key1&#125;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="/../imgs/title/image-20220904211732949.png" alt="image-20220904211732949"></p><h3 id="1-4、EL-表达式——运算"><a href="#1-4、EL-表达式——运算" class="headerlink" title="1.4、EL 表达式——运算"></a>1.4、EL 表达式——运算</h3><p><strong>语法：${ 运算表达式 }</strong> </p><p> 运算表达式和java语句相似</p><p><strong>1）关系运算</strong></p><table><thead><tr><th align="center">关系运算符</th><th>说 明</th><th>说 明 范 例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D; 或 eq</td><td>等于</td><td>${ 5 &#x3D;&#x3D; 5 } 或 ${ 5 eq 5 }</td><td align="center">true</td></tr><tr><td align="center">!&#x3D; 或 ne</td><td>不等于</td><td>${ 5 !&#x3D;5 } 或 ${ 5 ne 5 }</td><td align="center">false</td></tr><tr><td align="center">&lt; 或 lt</td><td>小于</td><td>${ 3 &lt; 5 } 或 ${ 3 lt 5 }</td><td align="center">true</td></tr><tr><td align="center">&gt; 或 gt</td><td>大于</td><td>${ 2 &gt; 10 } 或 ${ 2 gt 10 }</td><td align="center">false</td></tr><tr><td align="center">&lt;&#x3D; 或 le</td><td>小于等于</td><td>${ 5 &lt;&#x3D; 12 } 或 ${ 5 le 12 }</td><td align="center">true</td></tr><tr><td align="center">&gt;&#x3D; 或 ge</td><td>大于等于</td><td>${ 3 &gt;&#x3D; 5 } 或 ${ 3 ge 5 }</td><td align="center">false</td></tr></tbody></table><p><img src="/../imgs/title/image-20220904211744350.png" alt="image-20220904211744350"></p><p><strong>3）empty 运算</strong></p><blockquote><p>empty 运算可以判断一个数据是否为空，如果为空，则输出 true,不为空输出 false。 </p><p>以下几种情况为空： </p><p>1、值为 null 值的时候，为空 </p><p>2、值为空串的时候，为空 </p><p>3、值是 Object 类型数组，长度为零的时候 </p><p>4、list 集合，元素个数为零</p><p>5、map 集合，元素个数为零</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">// 1、值为 null 值的时候，为空</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyNull&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 2、值为空串的时候，为空</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyStr&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 3、值是 Object 类型数组，长度为零的时候</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyArr&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"><span class="comment">// 4、list 集合，元素个数为零</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// list.add(&quot;abc&quot;);</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyList&quot;</span>, list);</span><br><span class="line"><span class="comment">// 5、map 集合，元素个数为零</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"><span class="comment">// map.put(&quot;key1&quot;, &quot;value1&quot;);</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;emptyMap&quot;</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123; empty emptyNull &#125; &lt;br/&gt;</span><br><span class="line">$&#123; empty emptyStr &#125; &lt;br/&gt;</span><br><span class="line">$&#123; empty emptyArr &#125; &lt;br/&gt;</span><br><span class="line">$&#123; empty emptyList &#125; &lt;br/&gt;</span><br><span class="line">$&#123; empty emptyMap &#125; &lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/../imgs/title/image-20220904211756173.png" alt="image-20220904211756173"></p><p><strong>4)、三元运算</strong> </p><p>表达式 1？表达式 2：表达式 3 如果表达式 1 的值为真，返回表达式 2 的值，如果表达式 1 的值为假，返回表达式 3 的值。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123; <span class="number">12</span> != <span class="number">12</span> ? <span class="string">&quot;你帅呆了&quot;</span>:<span class="string">&quot;你又骗人啦&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>5)“.”点运算 和 [] 中括号运算符</strong></p><p><strong>.</strong>  点运算，可以输出 Bean 对象中某个属性的值。</p><p> **[]**中括号运算，可以输出有序集合中某个元素的值。 </p><p>并且[]中括号运算，还可以输出 map 集合中 key 里含有特殊字符的 key 的值。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;a.a.a&quot;</span>, <span class="string">&quot;aaaValue&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;b+b+b&quot;</span>, <span class="string">&quot;bbbValue&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;c-c-c&quot;</span>, <span class="string">&quot;cccValue&quot;</span>);</span><br><span class="line">request.setAttribute(<span class="string">&quot;map&quot;</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123; map[<span class="string">&#x27;a.a.a&#x27;</span>] &#125; &lt;br&gt;</span><br><span class="line">$&#123; map[<span class="string">&quot;b+b+b&quot;</span>] &#125; &lt;br&gt;</span><br><span class="line">$&#123; map[<span class="string">&#x27;c-c-c&#x27;</span>] &#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5、EL-表达式的-11-个隐含对象"><a href="#1-5、EL-表达式的-11-个隐含对象" class="headerlink" title="1.5、EL 表达式的 11 个隐含对象"></a>1.5、EL 表达式的 11 个隐含对象</h3><p>EL 个达式中 11 个隐含对象，是 EL 表达式中自己定义的，可以直接使用。</p><p><img src="/../imgs/title/image-20220904211809069.png" alt="image-20220904211809069"></p><h4 id="1-5-1、EL-获取四个特定域中的属性"><a href="#1-5-1、EL-获取四个特定域中的属性" class="headerlink" title="1.5.1、EL 获取四个特定域中的属性"></a>1.5.1、<strong>EL 获取四个特定域中的属性</strong></h4><p><img src="/../imgs/title/image-20220904211816929.png" alt="image-20220904211816929"></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;pageContext1&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    session.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;session1&quot;</span>);</span><br><span class="line">    application.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;application1&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;pageScope.key1&#125;&lt;br&gt;</span><br><span class="line">$&#123;requestScope.key1&#125;&lt;br&gt;</span><br><span class="line">$&#123;sessionScope.key1&#125;&lt;br&gt;</span><br><span class="line">$&#123;applicationScope.key1&#125;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="/../imgs/title/image-20220904211825062.png" alt="image-20220904211825062"></p><h4 id="1-5-2、pageContext-对象的使用"><a href="#1-5-2、pageContext-对象的使用" class="headerlink" title="1.5.2、pageContext 对象的使用"></a>1.5.2、pageContext 对象的使用</h4><ol><li><p>协议：</p></li><li><p>服务器 ip： </p></li><li><p>服务器端口： </p></li><li><p>获取工程路径： </p></li><li><p>获取请求方法： </p></li><li><p>获取客户端 ip 地址： </p></li><li><p>获取会话的 id 编号：</p></li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--</span><br><span class="line">request.getScheme() 它可以获取请求的协议</span><br><span class="line">request.getServerName() 获取请求的服务器 ip 或域名</span><br><span class="line">request.getServerPort() 获取请求的服务器端口号</span><br><span class="line">getContextPath() 获取当前工程路径</span><br><span class="line">request.getMethod() 获取请求的方式（GET 或 POST）</span><br><span class="line">request.getRemoteHost() 获取客户端的 ip 地址</span><br><span class="line">session.getId() 获取会话的唯一标识</span><br><span class="line">--%&gt;</span><br><span class="line">    <span class="comment">//企业开发中一般用setAttribute来获取</span></span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;req&quot;</span>, request);</span><br><span class="line">    %&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="number">1.</span>协议： $&#123; req.scheme &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">2.</span>服务器 ip：$&#123; pageContext.request.serverName &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">3.</span>服务器端口：$&#123; pageContext.request.serverPort &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">4.</span>获取工程路径：$&#123; pageContext.request.contextPath &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">5.</span>获取请求方法：$&#123; pageContext.request.method &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">6.</span>获取客户端 ip 地址：$&#123; pageContext.request.remoteHost &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">7.</span>获取会话的 id 编号：$&#123; pageContext.session.id &#125;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\庞继豪\AppData\Roaming\Typora\typora-user-images\image-20220425201310009.png" alt="image-20220425201310009"></p><h4 id="1-5-3、EL-表达式其他隐含对象的使用"><a href="#1-5-3、EL-表达式其他隐含对象的使用" class="headerlink" title="1.5.3、EL 表达式其他隐含对象的使用"></a>1.5.3、EL 表达式其他隐含对象的使用</h4><p>param Map 它可以获取请求参数的值 </p><p>paramValues Map 它也可以获取请求参数的值，获取多个值的时候使用。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出请求参数 username 的值：$&#123; param.username &#125; &lt;br&gt;</span><br><span class="line">输出请求参数 password 的值：$&#123; param.password &#125; &lt;br&gt;</span><br><span class="line">输出请求参数 username 的值：$&#123; paramValues.username[<span class="number">0</span>] &#125; &lt;br&gt;</span><br><span class="line">输出请求参数 hobby 的值：$&#123; paramValues.hobby[<span class="number">0</span>] &#125; &lt;br&gt;</span><br><span class="line">输出请求参数 hobby 的值：$&#123; paramValues.hobby[<span class="number">1</span>] &#125; &lt;br&gt;</span><br></pre></td></tr></table></figure><p>headerMap 它可以获取请求头的信息 </p><p>headerValues Map 它可以获取请求头的信息，它可以获取多个值的情况</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出请求头【User-Agent】的值：$&#123; header[<span class="string">&#x27;User-Agent&#x27;</span>] &#125; </span><br><span class="line"> 输出请求头【Connection】的值：$&#123; header.Connection &#125; </span><br><span class="line"> 输出请求头【User-Agent】的值：$&#123; headerValues[<span class="string">&#x27;User-Agent&#x27;</span>][<span class="number">0</span>] &#125; </span><br></pre></td></tr></table></figure><p>cookie Map 它可以获取当前请求的 Cookie 信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取 Cookie 的名称：$&#123; cookie.JSESSIONID.name &#125; </span><br><span class="line"> 获取 Cookie 的值：$&#123; cookie.JSESSIONID.value &#125; </span><br></pre></td></tr></table></figure><p>initParam Map 它可以获取在 web.xml 中配置的上下文参数</p><p>web.xml 中的配置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出<span class="tag">&lt;<span class="name">Context-param</span>&gt;</span>username 的值：$&#123; initParam.username &#125; </span><br><span class="line"> 输出<span class="tag">&lt;<span class="name">Context-param</span>&gt;</span>url 的值：$&#123; initParam.url &#125;</span><br></pre></td></tr></table></figure><h1 id="JSTL-标签库"><a href="#JSTL-标签库" class="headerlink" title="JSTL 标签库"></a>JSTL 标签库</h1><p>JSTL 标签库 全称是指 <strong>JSP Standard Tag Library</strong>       JSP 标准标签库。是一个不断完善的开放源代码的 JSP 标 签库。 </p><p>EL 表达式主要是为了替换 jsp 中的表达式脚本，而标签库则是为了替换代码脚本。这样使得整个 jsp 页面 变得更佳简洁。</p><p>JSTL 由五个不同功能的标签库组成。</p><p><img src="/../imgs/title/image-20220904211835381.png" alt="image-20220904211835381"></p><p>在 jsp 标签库中使用 taglib 指令引入标签库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CORE 标签库 &lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt; </span><br><span class="line">XML 标签库</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;x&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/xml&quot;</span> %&gt;</span><br><span class="line">FMT 标签库</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br><span class="line">SQL 标签库</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;sql&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/sql&quot;</span> %&gt;</span><br><span class="line">FUNCTIONS 标签库</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fn&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h2 id="1、JSTL-标签库的使用步骤"><a href="#1、JSTL-标签库的使用步骤" class="headerlink" title="1、JSTL 标签库的使用步骤"></a>1、JSTL 标签库的使用步骤</h2><p>1、先导入 jstl 标签库的 jar 包。</p><p> taglibs-standard-impl-1.2.1.jar</p><p> taglibs-standard-spec-1.2.1.jar</p><p>2、第二步，使用 taglib 指令引入标签库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h2 id="1-1、core-核心库使用"><a href="#1-1、core-核心库使用" class="headerlink" title="1.1、core 核心库使用"></a>1.1、core 核心库使用</h2><h3 id="1-1-1、-lt-c-set-x2F-gt-（使用很少）"><a href="#1-1-1、-lt-c-set-x2F-gt-（使用很少）" class="headerlink" title="1.1.1、&lt;c:set &#x2F;&gt;（使用很少）"></a>1.1.1、&lt;c:set &#x2F;&gt;（使用很少）</h3><p>作用：set 标签可以往域中保存数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">i.&lt;c:set /&gt;</span><br><span class="line">作用：set 标签可以往域中保存数据</span><br><span class="line">域对象.setAttribute(key,value);</span><br><span class="line">scope 属性设置保存到哪个域</span><br><span class="line">page 表示 PageContext 域（默认值）</span><br><span class="line">request 表示 Request 域</span><br><span class="line">session 表示 Session 域</span><br><span class="line">application 表示 ServletContext 域</span><br><span class="line"><span class="keyword">var</span> 属性设置 key 是多少</span><br><span class="line">value 属性设置值</span><br><span class="line">--%&gt;</span><br><span class="line">保存之前：$&#123; sessionScope.abc &#125; &lt;br&gt;</span><br><span class="line">&lt;c:set scope=<span class="string">&quot;session&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;abc&quot;</span> value=<span class="string">&quot;abcValue&quot;</span>/&gt;</span><br><span class="line">保存之后：$&#123; sessionScope.abc &#125; &lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="1-1-2、-lt-c-if-x2F-gt"><a href="#1-1-2、-lt-c-if-x2F-gt" class="headerlink" title="1.1.2、&lt;c:if &#x2F;&gt;"></a>1.1.2、&lt;c:if &#x2F;&gt;</h3><p>if 标签用来做 if 判断。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">ii.&lt;c:<span class="keyword">if</span> /&gt;</span><br><span class="line"><span class="keyword">if</span> 标签用来做 <span class="keyword">if</span> 判断。</span><br><span class="line">test 属性表示判断的条件（使用 EL 表达式输出）</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123; 12 == 12 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h1&gt;<span class="number">12</span> 等于 <span class="number">12</span>&lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123; 12 != 12 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h1&gt;<span class="number">12</span> 不等于 <span class="number">12</span>&lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;标签</span><br></pre></td></tr></table></figure><h3 id="1-1-3、-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签"><a href="#1-1-3、-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签" class="headerlink" title="1.1.3、&lt;c:choose &gt; &lt; c:when&gt;&lt;c:otherwise &gt;标签"></a>1.1.3、&lt;c:choose &gt; &lt; c:when&gt;&lt;c:otherwise &gt;标签</h3><p>作用：多路判断。跟 switch … case … default 非常接近</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">iii.&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</span><br><span class="line">作用：多路判断。跟 <span class="keyword">switch</span> ... <span class="keyword">case</span> .... <span class="keyword">default</span> 非常接近</span><br><span class="line">    </span><br><span class="line">choose 标签开始选择判断</span><br><span class="line">when 标签表示每一种判断情况</span><br><span class="line">test 属性表示当前这种判断情况的值</span><br><span class="line">otherwise 标签表示剩下的情况</span><br><span class="line">    </span><br><span class="line">&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签使用时需要注意的点：</span><br><span class="line"><span class="number">1</span>、标签里不能使用 html 注释，要使用 jsp 注释</span><br><span class="line"><span class="number">2</span>、when 标签的父标签一定要是 choose 标签</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">&quot;height&quot;</span>, <span class="number">180</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;%-- 这是 html 注释 --%&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123; requestScope.height &gt; 190 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h2&gt;小巨人&lt;/h2&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123; requestScope.height &gt; 180 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h2&gt;很高&lt;/h2&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123; requestScope.height &gt; 170 &#125;&quot;</span>&gt;</span><br><span class="line">&lt;h2&gt;还可以&lt;/h2&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:otherwise&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123;requestScope.height &gt; 160&#125;&quot;</span>&gt;</span><br><span class="line">&lt;h3&gt;大于 <span class="number">160</span>&lt;/h3&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123;requestScope.height &gt; 150&#125;&quot;</span>&gt;</span><br><span class="line">&lt;h3&gt;大于 <span class="number">150</span>&lt;/h3&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=<span class="string">&quot;$&#123;requestScope.height &gt; 140&#125;&quot;</span>&gt;</span><br><span class="line">&lt;h3&gt;大于 <span class="number">140</span>&lt;/h3&gt;</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:otherwise&gt;</span><br><span class="line">其他小于 <span class="number">140</span></span><br><span class="line">&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h3 id="1-1-4、-lt-c-forEach-x2F-gt"><a href="#1-1-4、-lt-c-forEach-x2F-gt" class="headerlink" title="1.1.4、&lt; c:forEach &#x2F;&gt;"></a>1.1.4、&lt; c:forEach &#x2F;&gt;</h3><p>作用：遍历输出使用。</p><ol><li><p>遍历 1 到 10，输出</p><p>​示例代码：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--<span class="number">1.</span>遍历 <span class="number">1</span> 到 <span class="number">10</span>，输出</span><br><span class="line">begin 属性设置开始的索引</span><br><span class="line">end 属性设置结束的索引</span><br><span class="line"><span class="keyword">var</span> 属性表示循环的变量(也是当前正在遍历到的数据)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;10&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;第$&#123;i&#125;行&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>遍历 Object 数组</p><p>示例代码：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- <span class="number">2.</span>遍历 Object 数组</span><br><span class="line"><span class="keyword">for</span> (Object item: arr)</span><br><span class="line">items 表示遍历的数据源（遍历的集合）</span><br><span class="line"><span class="keyword">var</span> 表示当前遍历到的数据</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">&quot;arr&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;18610541354&quot;</span>,<span class="string">&quot;18688886666&quot;</span>,<span class="string">&quot;18699998888&quot;</span>&#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123; requestScope.arr &#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;item&quot;</span>&gt;</span><br><span class="line">$&#123; item &#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>遍历 Map 集合</p><p>示例代码：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class="line">map.put(&quot;key2&quot;, &quot;value2&quot;);</span><br><span class="line">map.put(&quot;key3&quot;, &quot;value3&quot;);</span><br><span class="line">// for ( Map.Entry&lt;String,Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">// &#125;</span><br><span class="line">request.setAttribute(&quot;map&quot;, map);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=&quot;$&#123; requestScope.map &#125;&quot; var=&quot;entry&quot;&gt;</span><br><span class="line">&lt;h1&gt;$&#123;entry.key&#125; = $&#123;entry.value&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>4、遍历 List 集合</p><p>Sstudent：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">//4.编号，用户名，密码，年龄，电话信息</span><br><span class="line">private Integer id;</span><br><span class="line">private String username;</span><br><span class="line">private String password;</span><br><span class="line">private Integer age;</span><br><span class="line">private String phone;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--4.遍历 List 集合---list 中存放 Student 类，有属性：编号，用户名，密码，年龄，电话信息--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">List&lt;Student&gt; studentList = new ArrayList&lt;Student&gt;();</span><br><span class="line">for (int i = 1; i &lt;= 10; i++) &#123;</span><br><span class="line">studentList.add(new Student(i,&quot;username&quot;+i ,&quot;pass&quot;+i,18+i,&quot;phone&quot;+i));</span><br><span class="line">&#125;</span><br><span class="line">request.setAttribute(&quot;stus&quot;, studentList);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">&lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">&lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">&lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">&lt;th&gt;电话&lt;/th&gt;</span><br><span class="line">&lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">items 表示遍历的集合</span><br><span class="line">var 表示遍历到的数据</span><br><span class="line">begin 表示遍历的开始索引值</span><br><span class="line">end 表示结束的索引值</span><br><span class="line">step 属性表示遍历的步长值</span><br><span class="line">varStatus 属性表示当前遍历到的数据的状态</span><br><span class="line">for（int i = 1; i &lt; 10; i+=2）</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach begin=&quot;2&quot; end=&quot;7&quot; step=&quot;2&quot; varStatus=&quot;status&quot; items=&quot;$&#123;requestScope.stus&#125;&quot; var=&quot;stu&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.id&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.username&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.password&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;stu.phone&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;status.step&#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EL  JSTL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
